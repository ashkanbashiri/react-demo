{"version":3,"sources":["sortingAlgorithms/sortingAlgorithms.js","SortingVisualizer/SortingVisualizer.jsx","layout/Header.js","MachineLearning/MachineLearning.jsx","CovidTracker/CovidTracker.jsx","CovidSummary.jsx","App.js","serviceWorker.js","index.js"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","getquickSortAnimations","quickSortHelper","arr","low","high","pi","pivot","temp","partition","getHeapSortAnimations","n","heapify","largest","l","r","swap","SortingVisualizer","props","state","showmsg","arr_size","animation_speed","quickSortDisabled","heapSortDisabled","mergeSortDisabled","bubbleSortDisabled","sliderDisabled","resetArrayDisabled","theme","this","resetArray","document","body","classList","remove","randomIntFromInterval","setState","console","log","disableAll","arrayBars","getElementsByClassName","tooltips","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","tooltip","height","innerHTML","enableAll","getBubbleSortAnimations","javaScriptSortedArray","sort","a","b","sortedArray2","arraysAreEqual","e","target","value","Fragment","className","type","min","max","data-toggle","data-placement","title","disabled","onChange","handleSizeChange","id","onClick","mergeSort","quickSort","heapSort","bubbleSort","display","testSortingAlgorithms","fontFamily","background","margin","data-period","data-rotate","position","map","idx","key","width","top","left","fontWeight","textAlign","marginTop","marginLeft","React","Component","random","arrayOne","arrayTwo","headerStyle","padding","aStyle","textDecoration","Header","src","href","to","MachineLearning","CovidTracker","handleCountryChange","selectedOption","selectedCountry","country_data","select_","filter","element","country","labels","dates","datasets","label","fill","lineTension","borderColor","borderWidth","data","confirmed","deaths","recovered","handleSubmit","bind","summary","countries","options","months","fetch","then","response","json","all","forEach","includes","Country","date_","Date","getMonth","getDate","indexOf","Confirmed","Deaths","Recovered","active","Active","mn","mx","random_country","rnd_range","autoFocus","maintainAspectRatio","responsive","text","fontSize","legend","CovidSummary","columns","field","rows","global","name","totalConfirmed","Global","TotalConfirmed","newConfirmed","NewConfirmed","totalDeaths","TotalDeaths","newDeaths","NewDeaths","totalRecovered","TotalRecovered","newRecovered","NewRecovered","lastUpdate","Countries","country_row","overflow","striped","bordered","hover","App","useState","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.331f32c0.chunk.js","sourcesContent":["export function getMergeSortAnimations(array) {\r\n  const animations = [];\r\n  if (array.length <= 1) return array;\r\n  const auxiliaryArray = array.slice();\r\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n  return [animations, array];\r\n}\r\n\r\nfunction mergeSortHelper(\r\n  mainArray,\r\n  startIdx,\r\n  endIdx,\r\n  auxiliaryArray,\r\n  animations,\r\n) {\r\n  if (startIdx === endIdx) return;\r\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n}\r\n\r\nfunction doMerge(\r\n  mainArray,\r\n  startIdx,\r\n  middleIdx,\r\n  endIdx,\r\n  auxiliaryArray,\r\n  animations,\r\n) {\r\n  let k = startIdx;\r\n  let i = startIdx;\r\n  let j = middleIdx + 1;\r\n  while (i <= middleIdx && j <= endIdx) {\r\n    // These are the values that we're comparing; we push them once\r\n    // to change their color.\r\n    animations.push([i, j]);\r\n    // These are the values that we're comparing; we push them a second\r\n    // time to revert their color.\r\n    animations.push([i, j]);\r\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index i in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[i]]);\r\n      mainArray[k++] = auxiliaryArray[i++];\r\n    } else {\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index j in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[j]]);\r\n      mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n  }\r\n  while (i <= middleIdx) {\r\n    // These are the values that we're comparing; we push them once\r\n    // to change their color.\r\n    animations.push([i, i]);\r\n    // These are the values that we're comparing; we push them a second\r\n    // time to revert their color.\r\n    animations.push([i, i]);\r\n    // We overwrite the value at index k in the original array with the\r\n    // value at index i in the auxiliary array.\r\n    animations.push([k, auxiliaryArray[i]]);\r\n    mainArray[k++] = auxiliaryArray[i++];\r\n  }\r\n  while (j <= endIdx) {\r\n    // These are the values that we're comparing; we push them once\r\n    // to change their color.\r\n    animations.push([j, j]);\r\n    // These are the values that we're comparing; we push them a second\r\n    // time to revert their color.\r\n    animations.push([j, j]);\r\n    // We overwrite the value at index k in the original array with the\r\n    // value at index j in the auxiliary array.\r\n    animations.push([k, auxiliaryArray[j]]);\r\n    mainArray[k++] = auxiliaryArray[j++];\r\n  }\r\n}\r\n\r\nexport function getquickSortAnimations(array) {\r\n  const animations = [];\r\n  quickSortHelper(array, 0, array.length - 1, animations);\r\n  return [animations, array];\r\n}\r\n\r\nfunction partition(arr, low, high, animations) {\r\n  const pivot = arr[high];\r\n  let i = low - 1; // index of smaller element\r\n  for (let j = low; j < high; j++) {\r\n    // If current element is smaller than the pivot\r\n    animations.push([j, high]);\r\n    animations.push([j, high]);\r\n    if (arr[j] < pivot) {\r\n      i++;\r\n      // swap arr[i] and arr[j]\r\n      animations.push([i, arr[j]]);\r\n      animations.push([j, arr[i]]);\r\n      let temp = arr[i];\r\n      arr[i] = arr[j];\r\n      arr[j] = temp;\r\n    } else {\r\n      animations.push([i + 1, arr[i + 1]]);\r\n      animations.push([j, arr[j]]);\r\n    }\r\n  }\r\n\r\n  // swap arr[i+1] and arr[high] (or pivot)\r\n  animations.push([i + 1, high]);\r\n  animations.push([i + 1, high]);\r\n  animations.push([i + 1, arr[high]]);\r\n  animations.push([high, arr[i + 1]]);\r\n  let temp = arr[i + 1];\r\n  arr[i + 1] = arr[high];\r\n  arr[high] = temp;\r\n\r\n  return i + 1;\r\n}\r\n\r\n/* The main function that implements QuickSort() \r\n      arr[] --> Array to be sorted, \r\n      low  --> Starting index, \r\n      high  --> Ending index */\r\nfunction quickSortHelper(arr, low, high, animations) {\r\n  if (low < high) {\r\n    /* pi is partitioning index, arr[pi] is  \r\n              now at right place */\r\n    let pi = partition(arr, low, high, animations);\r\n\r\n    // Recursively sort elements before\r\n    // partition and after partition\r\n    quickSortHelper(arr, low, pi - 1, animations);\r\n    quickSortHelper(arr, pi + 1, high, animations);\r\n  }\r\n}\r\n\r\nexport function getBubbleSortAnimations(array) {\r\n  const animations = [];\r\n  const n = array.length;\r\n  for (let i = 0; i < n - 1; i++) {\r\n    for (let j = 0; j < n - i - 1; j++) {\r\n      animations.push([j, j + 1]);\r\n      animations.push([j, j + 1]);\r\n      if (array[j] > array[j + 1]) {\r\n        // swap arr[j+1] and arr[i]\r\n        animations.push([j, array[j + 1]]);\r\n        animations.push([j + 1, array[j]]);\r\n        let temp = array[j];\r\n        array[j] = array[j + 1];\r\n        array[j + 1] = temp;\r\n      } else {\r\n        animations.push([j, array[j]]);\r\n        animations.push([j + 1, array[j + 1]]);\r\n      }\r\n    }\r\n  }\r\n  return [animations, array];\r\n}\r\n\r\n\r\nexport function getHeapSortAnimations(array, n) {\r\n  const animations = [];\r\n\r\n  // Build heap (rearrange array) \r\n  for (let i = Math.floor(n / 2); i >= 0; i = i - 1) { heapify(array, n, i, animations); }\r\n\r\n  // One by one extract an element from heap \r\n  for (let j = n - 1; j > 0; j = j - 1) {\r\n    // Move current root to end \r\n    //animations.push([0, i])\r\n    animations.push([0, j]);\r\n    animations.push([j, 0]);\r\n    animations.push([0, array[j]]);\r\n    animations.push([j, array[0]]);\r\n    let temp = array[0];\r\n    array[0] = array[j];\r\n    array[j] = temp;\r\n\r\n    // call max heapify on the reduced heap \r\n    heapify(array, j, 0, animations);\r\n  }\r\n  return [animations, array];\r\n}\r\n\r\n\r\nfunction heapify(array, n, i, animations) {\r\n  let largest = i; // Initialize largest as root \r\n  let l = 2 * i + 1; // left = 2*i + 1 \r\n  let r = 2 * i + 2; // right = 2*i + 2 \r\n\r\n  // If left child is larger than root \r\n  if (l < n && array[l] > array[largest])\r\n    largest = l;\r\n\r\n  // If right child is larger than largest so far \r\n  if (r < n && array[r] > array[largest])\r\n    largest = r;\r\n\r\n  // If largest is not root \r\n  if (!(largest == i)) {\r\n    animations.push([largest, i]);\r\n    animations.push([i, largest]);\r\n    animations.push([largest, array[i]]);\r\n    animations.push([i, array[largest]]);\r\n    let swap = array[i];\r\n    array[i] = array[largest];\r\n    array[largest] = swap;\r\n\r\n    // Recursively heapify the affected sub-tree \r\n    heapify(array, n, largest, animations);\r\n  }\r\n} \r\n","import React from \"react\";\r\nimport {\r\n  getMergeSortAnimations,\r\n  getquickSortAnimations,\r\n  getBubbleSortAnimations,\r\n  getHeapSortAnimations,\r\n} from \"../sortingAlgorithms/sortingAlgorithms.js\";\r\nimport \"./SortingVisualizer.scss\";\r\n\r\n// Change this value for the speed of the animations.\r\n\r\n// Change this value for the number of bars (value) in the array.\r\n\r\n// This is the main color of the array bars.\r\nconst PRIMARY_COLOR = \"#57a18b\";\r\n\r\n// This is the color of array bars that are being compared throughout the animations.\r\nconst SECONDARY_COLOR = \"orangered\";\r\n\r\nexport default class SortingVisualizer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      array: [],\r\n      showmsg: false,\r\n      arr_size: 100,\r\n      animation_speed: 5,\r\n      quickSortDisabled: false,\r\n      heapSortDisabled: false,\r\n      mergeSortDisabled: false,\r\n      bubbleSortDisabled: false,\r\n      sliderDisabled: false,\r\n      resetArrayDisabled: false,\r\n      theme: \"light\",\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.resetArray();\r\n    document.body.classList.remove(\"darkmode\");\r\n  }\r\n\r\n  resetArray() {\r\n    const array = [];\r\n    for (let i = 0; i < this.state.arr_size; i++) {\r\n      array.push(randomIntFromInterval(1, 400));\r\n    }\r\n    this.setState({ array: array });\r\n    if (array.length > 100) {\r\n      this.setState({ animation_speed: 20 });\r\n    } else {\r\n      this.setState({ animation_speed: 5 });\r\n    }\r\n  }\r\n\r\n  disableAll() {\r\n    this.setState({\r\n      quickSortDisabled: true,\r\n      heapSortDisabled: true,\r\n      mergeSortDisabled: true,\r\n      bubbleSortDisabled: true,\r\n      sliderDisabled: true,\r\n      resetArrayDisabled: true,\r\n    });\r\n  }\r\n  enableAll() {\r\n    this.setState({\r\n      quickSortDisabled: false,\r\n      heapSortDisabled: false,\r\n      mergeSortDisabled: false,\r\n      bubbleSortDisabled: false,\r\n      sliderDisabled: false,\r\n      resetArrayDisabled: false,\r\n    });\r\n  }\r\n  mergeSort() {\r\n    console.log(this.state.animation_speed);\r\n    this.disableAll();\r\n    const [animations, temp] = getMergeSortAnimations(this.state.array.slice());\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n      const tooltips = document.getElementsByClassName(\"tooltiptext\");\r\n      const isColorChange = i % 3 !== 2;\r\n      if (isColorChange) {\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * this.state.animation_speed);\r\n      } else {\r\n        setTimeout(() => {\r\n          const [barOneIdx, newHeight] = animations[i];\r\n          const barOneStyle = arrayBars[barOneIdx].style;\r\n          const tooltip = tooltips[barOneIdx];\r\n          barOneStyle.height = `${newHeight}px`;\r\n          tooltip.innerHTML = newHeight;\r\n          if (i == animations.length - 1) this.enableAll();\r\n        }, i * this.state.animation_speed);\r\n      }\r\n    }\r\n    //this.enableAll();\r\n  }\r\n\r\n  quickSort() {\r\n    this.disableAll();\r\n    const [animations, temp] = getquickSortAnimations(this.state.array.slice());\r\n    console.log(this.state.array);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n      const tooltips = document.getElementsByClassName(\"tooltiptext\");\r\n      const isColorChange = i % 4 < 2;\r\n      if (isColorChange) {\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = i % 4 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * this.state.animation_speed);\r\n      } else {\r\n        setTimeout(() => {\r\n          const [barOneIdx, newHeight] = animations[i];\r\n          const barOneStyle = arrayBars[barOneIdx].style;\r\n          const tooltip = tooltips[barOneIdx];\r\n          barOneStyle.height = `${newHeight}px`;\r\n          tooltip.innerHTML = newHeight;\r\n          if (i == animations.length - 1) this.enableAll();\r\n        }, i * this.state.animation_speed);\r\n      }\r\n    }\r\n    /* document.getElementById(\"slider\").disabled = false;\r\n     document.getElementById(\"resetArray\").disabled = false;\r\n     document.getElementById(\"quickSort\").disabled = false;\r\n     document.getElementById(\"bubbleSort\").disabled = false;\r\n     document.getElementById(\"mergeSort\").disabled = false;\r\n     document.getElementById(\"heapSort\").disabled = false;*/\r\n  }\r\n\r\n  afterSort() {}\r\n\r\n  heapSort() {\r\n    this.disableAll();\r\n    const [animations, temp] = getHeapSortAnimations(\r\n      this.state.array.slice(),\r\n      this.state.arr_size\r\n    );\r\n    console.log(this.state.array);\r\n\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n      const tooltips = document.getElementsByClassName(\"tooltiptext\");\r\n      const isColorChange = i % 4 < 2;\r\n      if (isColorChange) {\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = i % 4 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * this.state.animation_speed);\r\n      } else {\r\n        setTimeout(() => {\r\n          const [barOneIdx, newHeight] = animations[i];\r\n          const barOneStyle = arrayBars[barOneIdx].style;\r\n          const tooltip = tooltips[barOneIdx];\r\n          barOneStyle.height = `${newHeight}px`;\r\n          tooltip.innerHTML = newHeight;\r\n          if (i == animations.length - 1) this.enableAll();\r\n        }, i * this.state.animation_speed);\r\n      }\r\n    }\r\n  }\r\n\r\n  bubbleSort() {\r\n    this.disableAll();\r\n    this.setState({ showmsg: true });\r\n    setTimeout(() => {\r\n      this.setState({ showmsg: false });\r\n    }, 3000);\r\n    const [animations, temp] = getBubbleSortAnimations(\r\n      this.state.array.slice()\r\n    );\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n      const tooltips = document.getElementsByClassName(\"tooltiptext\");\r\n      const isColorChange = i % 4 < 2;\r\n      if (isColorChange) {\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = i % 4 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * this.state.animation_speed);\r\n      } else {\r\n        setTimeout(() => {\r\n          const [barOneIdx, newHeight] = animations[i];\r\n          const barOneStyle = arrayBars[barOneIdx].style;\r\n          const tooltip = tooltips[barOneIdx];\r\n          barOneStyle.height = `${newHeight}px`;\r\n          tooltip.innerHTML = newHeight;\r\n          if (i == animations.length - 1) this.enableAll();\r\n        }, i * this.state.animation_speed);\r\n      }\r\n    }\r\n  }\r\n\r\n  // NOTE: This method will only work if your sorting algorithms actually return\r\n  // the sorted arrays; if they return the animations (as they currently do), then\r\n  // this method will be broken.\r\n  testSortingAlgorithms() {\r\n    for (let i = 0; i < 100; i++) {\r\n      const array = [];\r\n      const length = randomIntFromInterval(40, 150);\r\n      for (let i = 0; i < length; i++) {\r\n        array.push(randomIntFromInterval(1, 1000));\r\n      }\r\n      const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\r\n      const [tempArray3, sortedArray3] = getquickSortAnimations(array.slice());\r\n      const [tempArray, sortedArray] = getMergeSortAnimations(array.slice());\r\n      const [tempArray2, sortedArray2] = getHeapSortAnimations(\r\n        array.slice(),\r\n        array.length\r\n      );\r\n\r\n      //console.log(arraysAreEqual(javaScriptSortedArray, sortedArray3));\r\n      //console.log(arraysAreEqual(javaScriptSortedArray, sortedArray));\r\n      //console.log(arraysAreEqual(javaScriptSortedArray, sortedArray2));\r\n      //console.log(array.length)\r\n      //console.log(sortedArray2.length)\r\n      if (arraysAreEqual(javaScriptSortedArray, sortedArray2) == false) {\r\n        console.log(array.slice());\r\n        console.log(sortedArray2);\r\n      }\r\n    }\r\n  }\r\n\r\n  handleSizeChange(e) {\r\n    this.setState({ arr_size: e.target.value }, () => {\r\n      const array = [];\r\n      for (let i = 0; i < this.state.arr_size; i++) {\r\n        array.push(randomIntFromInterval(1, 400));\r\n      }\r\n      this.setState({ array: array });\r\n      console.log(this.state.arr_size);\r\n    });\r\n  }\r\n  //<div className=\"tooltiptext\">{this.state.arr_size}</div>\r\n\r\n  render() {\r\n    const { array } = this.state;\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"grid-container-sort\">\r\n          <div className=\"header-sort\">\r\n            <div>\r\n              <div className=\"input-range\">\r\n                <p>\r\n                  <b>Array Size: </b>\r\n                </p>\r\n                <input\r\n                  type=\"range\"\r\n                  min=\"5\"\r\n                  max=\"200\"\r\n                  data-toggle=\"tooltip\"\r\n                  data-placement=\"left\"\r\n                  title={this.state.arr_size}\r\n                  className=\"input-range\"\r\n                  disabled={this.state.sliderDisabled}\r\n                  value={this.state.arr_size}\r\n                  onChange={(e) => {\r\n                    this.handleSizeChange(e);\r\n                  }}\r\n                  id=\"slider\"\r\n                />\r\n              </div>\r\n              <button\r\n                id=\"resetArray\"\r\n                className=\"btn btn-dark\"\r\n                disabled={this.state.resetArrayDisabled}\r\n                type=\"button\"\r\n                onClick={() => this.resetArray()}\r\n              >\r\n                New Random List\r\n              </button>\r\n            </div>\r\n            <div>\r\n              <button\r\n                id=\"mergeSort\"\r\n                disabled={this.state.mergeSortDisabled}\r\n                className=\"btn btn-info\"\r\n                onClick={() => this.mergeSort()}\r\n              >\r\n                Merge Sort\r\n              </button>\r\n            </div>\r\n            <div>\r\n              <button\r\n                id=\"quickSort\"\r\n                disabled={this.state.quickSortDisabled}\r\n                className=\"btn btn-info\"\r\n                onClick={() => this.quickSort()}\r\n              >\r\n                Quick Sort\r\n              </button>\r\n            </div>\r\n            <div>\r\n              <button\r\n                id=\"heapSort\"\r\n                disabled={this.state.heapSortDisabled}\r\n                className=\"btn btn-info\"\r\n                onClick={() => this.heapSort()}\r\n              >\r\n                Heap Sort\r\n              </button>\r\n            </div>\r\n            <div>\r\n              <button\r\n                id=\"bubbleSort\"\r\n                disabled={this.state.bubbleSortDisabled}\r\n                className=\"btn btn-info\"\r\n                onClick={() => this.bubbleSort()}\r\n              >\r\n                Bubble Sort\r\n              </button>\r\n            </div>\r\n            <button\r\n              className=\"btn btn-warning\"\r\n              style={{ display: \"None\" }}\r\n              onClick={() => this.testSortingAlgorithms()}\r\n            >\r\n              Test\r\n            </button>\r\n          </div>\r\n          <div className=\"middle-sort\">\r\n            <h1\r\n              style={{\r\n                fontFamily: `Montserrat, sans-serif`,\r\n                background: `transparent`,\r\n                margin: `0.4em 0`,\r\n              }}\r\n            >\r\n              Technologies:\r\n              <span\r\n                className=\"txt-rotate\"\r\n                data-period=\"1000\"\r\n                data-rotate='[ \" HTML5\", \" CSS3\", \" React\", \" Javascript\" ]'\r\n              ></span>\r\n            </h1>\r\n            <div id=\"bars\" style={{ position: \"relative\" }}>\r\n              {array.map((value, idx) => (\r\n                <div\r\n                  className=\"array-bar\"\r\n                  key={idx}\r\n                  style={{\r\n                    backgroundColor: PRIMARY_COLOR,\r\n                    height: `${value}px`,\r\n                    width: `5px`,\r\n                    margin: `0px 1px`,\r\n                  }}\r\n                >\r\n                  <div className=\"tooltiptext\">{value}</div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n\r\n            <div\r\n              id=\"msg\"\r\n              style={{\r\n                display: this.state.showmsg ? \"block\" : \"None\",\r\n                position: `fixed`,\r\n                width: `500px`,\r\n                height: `100px`,\r\n                top: `50%`,\r\n                left: `50%`,\r\n                color: `gray`,\r\n                fontWeight: \"bold\",\r\n                backgroundColor: \"cyan\",\r\n                textAlign: \"center\",\r\n                marginTop: `-100px`,\r\n                marginLeft: `-250px`,\r\n              }}\r\n            >\r\n              SPOILERS! BubbleSort is a bit slow --> O(N^2)\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"footer\">\r\n          <p>\r\n            <b>\r\n              Visualizing Sorting Algorithms, Developed with React Framework.\r\n              Written by Ashkan Bashiri.\r\n            </b>\r\n          </p>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\n// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\r\nfunction randomIntFromInterval(min, max) {\r\n  // min and max included\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\nfunction arraysAreEqual(arrayOne, arrayTwo) {\r\n  if (arrayOne.length !== arrayTwo.length) return false;\r\n  for (let i = 0; i < arrayOne.length; i++) {\r\n    if (arrayOne[i] !== arrayTwo[i]) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n","import React from \"react\";\r\nimport \"./Header.scss\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction Header() {\r\n  return (\r\n    <React.Fragment>\r\n      <div id=\"particles-js\"></div>\r\n      <script src=\"particles.js\"></script>\r\n      <header style={headerStyle}>\r\n        <h1>\r\n          <a style={aStyle} href=\"../\">\r\n            Ashkan's React App\r\n          </a>\r\n        </h1>\r\n        <Link className=\"my-class\" to=\"/sv\">\r\n          Sorting-Visualizer{\" \"}\r\n        </Link>\r\n        |{\" \"}\r\n        <Link className=\"my-class\" to=\"/covid19\">\r\n          Covid19-Tracker{\" \"}\r\n        </Link>\r\n        |{\" \"}\r\n        <Link className=\"my-class\" to=\"/covid_summary\">\r\n          Covid Summary{\" \"}\r\n        </Link>\r\n        |{\" \"}\r\n        <Link className=\"my-class\" to=\"/ml\">\r\n          DataScience Projects{\" \"}\r\n        </Link>\r\n      </header>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nconst headerStyle = {\r\n  background: \"#333\",\r\n  color: \"#fff\",\r\n  textAlign: \"center\",\r\n  padding: \"10px\",\r\n};\r\n\r\nconst linkStyle = {\r\n  textDecoration: \"none\",\r\n  \":hover\": {\r\n    textDecoration: \"underline\",\r\n    fontWeight: \"Bold\",\r\n  },\r\n  \":active\": {\r\n    textDecoration: \"underline\",\r\n    fontWeight: \"Bold\",\r\n    color: \"Blue\",\r\n  },\r\n};\r\nconst aStyle = {\r\n  color: \"#fff\",\r\n  textDecoration: \"none\",\r\n  \":hover\": {\r\n    textDecoration: \"underline\",\r\n    fontWeight: \"Bold\",\r\n    color: \"Blue\",\r\n  },\r\n  \":active\": {\r\n    textDecoration: \"underline\",\r\n    fontWeight: \"Bold\",\r\n    color: \"Blue\",\r\n  },\r\n};\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport './MachineLearning.css';\r\n\r\n\r\n// Change this value for the speed of the animations.\r\n\r\n// Change this value for the number of bars (value) in the array.\r\n\r\n// This is the main color of the array bars.\r\n\r\n\r\nexport default class MachineLearning extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {};\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"grid-container\">\r\n                    <div className=\"header\">\r\n                        <h1>Machine Learning Examples</h1>\r\n                        <p>Coming Soon ...</p>\r\n                    </div>\r\n                </div>\r\n                <div className=\"footer\">\r\n                    <p><b>Visualizing Machine Learning Algorithms, Developed with React Framework. Written by Ashkan Bashiri.</b></p>\r\n                </div>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}","import React from \"react\";\r\nimport \"./CovidTracker.scss\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport Select from \"react-select\";\r\n\r\n// Change this value for the speed of the animations.\r\n\r\n// Change this value for the number of bars (value) in the array.\r\n\r\n// This is the main color of the array bars.\r\n\r\nexport default class CovidTracker extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.handleCountryChange = this.handleCountryChange.bind(this);\r\n\r\n    this.state = {\r\n      summary: [],\r\n      countries: [],\r\n      country_data: [],\r\n      labels: [],\r\n      datasets: [],\r\n      selectedCountry: \"\",\r\n      options: [],\r\n    };\r\n  }\r\n  handleCountryChange = (selectedOption) => {\r\n    this.setState({ selectedCountry: selectedOption.value }, () => {\r\n      console.log(this.state.country_data);\r\n      console.log(this.state.selectedCountry);\r\n      const select_ = this.state.country_data.filter(\r\n        (element) => element.country == this.state.selectedCountry\r\n      );\r\n      console.log(select_);\r\n      var labels = select_[0].dates;\r\n      console.log(labels);\r\n      var datasets = [\r\n        {\r\n          label: \"#Confirmed\",\r\n          fill: false,\r\n          lineTension: 0.5,\r\n          backgroundColor: \"rgba(33,47,61,1)\",\r\n          borderColor: \"rgba(33,47,61,1)\",\r\n          borderWidth: 1,\r\n          data: select_[0].confirmed,\r\n        },\r\n        {\r\n          label: \"#Deaths\",\r\n          fill: false,\r\n          lineTension: 0.5,\r\n          backgroundColor: \"rgba(205,92,92,1)\",\r\n          borderColor: \"rgba(205,92,92,1)\",\r\n          borderWidth: 1,\r\n          data: select_[0].deaths,\r\n        },\r\n        {\r\n          label: \"#Recovered\",\r\n          fill: false,\r\n          lineTension: 0.5,\r\n          backgroundColor: \"rgba(72,201,176,1)\",\r\n          borderColor: \"rgba(72,201,176,1)\",\r\n          borderWidth: 1,\r\n          data: select_[0].recovered,\r\n        },\r\n      ];\r\n      this.setState({ labels: labels, datasets: datasets }, () => {\r\n        this.setState({ labels: labels, datasets: datasets });\r\n      });\r\n    });\r\n  };\r\n  componentDidMount() {\r\n    const options = [];\r\n    const months = [\r\n      \"Jan \",\r\n      \"Feb \",\r\n      \"Mar \",\r\n      \"Apr \",\r\n      \"May \",\r\n      \"Jun \",\r\n      \"Jul \",\r\n      \"Aug \",\r\n      \"Sep \",\r\n      \"Oct \",\r\n      \"Nov \",\r\n      \"Dec \",\r\n    ];\r\n    fetch(\"https://api.covid19api.com/all\")\r\n      .then((response) => {\r\n        return response.json();\r\n      })\r\n      .then((all) => {\r\n        let countries = [];\r\n        const country_data = [];\r\n        all.forEach((element) => {\r\n          if (!countries.includes(element.Country)) {\r\n            countries.push(element.Country);\r\n            let date_ = new Date(element.Date);\r\n            country_data.push({\r\n              country: element.Country,\r\n              confirmed: [element.Confirmed],\r\n              deaths: [element.Deaths],\r\n              recovered: [element.Recovered],\r\n              active: [element.Active],\r\n              dates: [months[date_.getMonth()] + date_.getDate()],\r\n            });\r\n            options.push({ value: element.Country, label: element.Country });\r\n          } else {\r\n            let date_ = new Date(element.Date);\r\n\r\n            if (\r\n              !country_data\r\n                .filter((data) => data.country === element.Country)[0]\r\n                .dates.includes(months[date_.getMonth()] + date_.getDate())\r\n            ) {\r\n              country_data\r\n                .filter((data) => data.country === element.Country)[0]\r\n                .confirmed.push(element.Confirmed);\r\n              country_data\r\n                .filter((data) => data.country === element.Country)[0]\r\n                .deaths.push(element.Deaths);\r\n              country_data\r\n                .filter((data) => data.country === element.Country)[0]\r\n                .recovered.push(element.Recovered);\r\n              country_data\r\n                .filter((data) => data.country === element.Country)[0]\r\n                .active.push(element.Active);\r\n              country_data\r\n                .filter((data) => data.country === element.Country)[0]\r\n                .dates.push(months[date_.getMonth()] + date_.getDate());\r\n            } else {\r\n              country_data.filter(\r\n                (data) => data.country === element.Country\r\n              )[0].confirmed[\r\n                country_data\r\n                  .filter((data) => data.country === element.Country)[0]\r\n                  .dates.indexOf(months[date_.getMonth()] + date_.getDate())\r\n              ] += element.Confirmed;\r\n\r\n              country_data.filter(\r\n                (data) => data.country === element.Country\r\n              )[0].deaths[\r\n                country_data\r\n                  .filter((data) => data.country === element.Country)[0]\r\n                  .dates.indexOf(months[date_.getMonth()] + date_.getDate())\r\n              ] += element.Deaths;\r\n\r\n              country_data.filter(\r\n                (data) => data.country === element.Country\r\n              )[0].recovered[\r\n                country_data\r\n                  .filter((data) => data.country === element.Country)[0]\r\n                  .dates.indexOf(months[date_.getMonth()] + date_.getDate())\r\n              ] += element.Recovered;\r\n\r\n              country_data.filter(\r\n                (data) => data.country === element.Country\r\n              )[0].active[\r\n                country_data\r\n                  .filter((data) => data.country === element.Country)[0]\r\n                  .dates.indexOf(months[date_.getMonth()] + date_.getDate())\r\n              ] += element.Active;\r\n            }\r\n          }\r\n        });\r\n        this.setState({ options });\r\n        this.setState({ countries });\r\n        this.setState({ country_data });\r\n      });\r\n  }\r\n  rnd_range(mn, mx) {\r\n    return Math.random() * (mx - mn) + mn;\r\n  }\r\n\r\n  handleSubmit() {\r\n    let random_country = this.state.countries[\r\n      Math.floor(this.rnd_range(0, this.state.countries.length)) - 1\r\n    ];\r\n\r\n    this.setState({ selectedCountry: random_country }, () => {\r\n      console.log(this.state.selectedCountry);\r\n\r\n      const select_ = this.state.country_data.filter(\r\n        (element) => element.country == this.state.selectedCountry\r\n      );\r\n      var labels = select_[0].dates;\r\n      console.log(labels);\r\n\r\n      var datasets = [\r\n        {\r\n          label: \"#Confirmed\",\r\n          fill: false,\r\n          lineTension: 0.5,\r\n          backgroundColor: \"rgba(33,47,61,1)\",\r\n          borderColor: \"rgba(33,47,61,1)\",\r\n          borderWidth: 1,\r\n          data: select_[0].confirmed,\r\n        },\r\n        {\r\n          label: \"#Deaths\",\r\n          fill: false,\r\n          lineTension: 0.5,\r\n          backgroundColor: \"rgba(205,92,92,1)\",\r\n          borderColor: \"rgba(205,92,92,1)\",\r\n          borderWidth: 1,\r\n          data: select_[0].deaths,\r\n        },\r\n        {\r\n          label: \"#Recovered\",\r\n          fill: false,\r\n          lineTension: 0.5,\r\n          backgroundColor: \"rgba(72,201,176,1)\",\r\n          borderColor: \"rgba(72,201,176,1)\",\r\n          borderWidth: 1,\r\n          data: select_[0].recovered,\r\n        },\r\n      ];\r\n      this.setState({ labels: labels, datasets: datasets }, () => {\r\n        this.setState({ labels: labels, datasets: datasets });\r\n      });\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"grid-container\">\r\n          <div className=\"header\">\r\n            <h1>Covid19 Tracker App</h1>\r\n          </div>\r\n\r\n          <p className=\"label\">Select a Country (Daily Updates):</p>\r\n          <div className=\"selector1\">\r\n            <Select\r\n              onChange={this.handleCountryChange}\r\n              options={this.state.options}\r\n              autoFocus={true}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"middle\">\r\n            <Line\r\n              data={this.state}\r\n              options={{\r\n                maintainAspectRatio: true,\r\n                responsive: true,\r\n                title: {\r\n                  display: true,\r\n                  text: \"Daily statistics for \" + this.state.selectedCountry,\r\n                  fontSize: 20,\r\n                },\r\n                legend: {\r\n                  display: true,\r\n                  position: \"right\",\r\n                },\r\n              }}\r\n            />\r\n          </div>\r\n          <div className=\"footer\">\r\n            <p>\r\n              <b>\r\n                Visualizing Covid19 data, Developed with React Framework.\r\n                Written by Ashkan Bashiri.\r\n              </b>\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport \"./CovidSummary.scss\";\r\n\r\nimport { MDBDataTable } from \"mdbreact\";\r\nexport default class CovidSummary extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      data: [],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const data = {\r\n      columns: [\r\n        {\r\n          label: \"country\",\r\n          field: \"name\",\r\n          sort: \"asc\",\r\n          width: 150,\r\n        },\r\n        {\r\n          label: \"totalConfirmed\",\r\n          field: \"totalConfirmed\",\r\n          sort: \"desc\",\r\n          width: 150,\r\n        },\r\n        {\r\n          label: \"newConfirmed\",\r\n          field: \"newConfirmed\",\r\n          sort: \"desc\",\r\n          width: 150,\r\n        },\r\n        {\r\n          label: \"totalDeaths\",\r\n          field: \"totalDeaths\",\r\n          sort: \"desc\",\r\n          width: 150,\r\n        },\r\n        {\r\n          label: \"newDeaths\",\r\n          field: \"newDeaths\",\r\n          sort: \"desc\",\r\n          width: 150,\r\n        },\r\n        {\r\n          label: \"totalRecovered\",\r\n          field: \"totalRecovered\",\r\n          sort: \"desc\",\r\n          width: 150,\r\n        },\r\n        {\r\n          label: \"newRecovered\",\r\n          field: \"newRecovered\",\r\n          sort: \"desc\",\r\n          width: 150,\r\n        },\r\n        {\r\n          label: \"lastUpdate\",\r\n          field: \"lastUpdate\",\r\n          sort: \"desc\",\r\n          width: 150,\r\n        },\r\n      ],\r\n      rows: [],\r\n    };\r\n    fetch(\"https://api.covid19api.com/summary\")\r\n      .then((response) => {\r\n        return response.json();\r\n      })\r\n      .then((all) => {\r\n        let global = {\r\n          name: \"Global\",\r\n          totalConfirmed: all.Global.TotalConfirmed,\r\n          newConfirmed: all.Global.NewConfirmed,\r\n          totalDeaths: all.Global.TotalDeaths,\r\n          newDeaths: all.Global.NewDeaths,\r\n          totalRecovered: all.Global.TotalRecovered,\r\n          newRecovered: all.Global.NewRecovered,\r\n          lastUpdate: \"\",\r\n        };\r\n        data.rows.push(global);\r\n        all.Countries.forEach((element) => {\r\n          let country_row = {\r\n            name: element.Country,\r\n            totalConfirmed: element.TotalConfirmed,\r\n            newConfirmed: element.NewConfirmed,\r\n            totalDeaths: element.TotalDeaths,\r\n            newDeaths: element.NewDeaths,\r\n            totalRecovered: element.TotalRecovered,\r\n            newRecovered: element.NewRecovered,\r\n            lastUpdate: element.Date,\r\n          };\r\n          data.rows.push(country_row);\r\n        });\r\n\r\n        this.setState({ data });\r\n      });\r\n  }\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"grid-container\">\r\n          <div className=\"header\">\r\n            <h1>Covid19 Summary Table</h1>\r\n          </div>\r\n          <div className=\"middle\">\r\n            <MDBDataTable\r\n              style={{ overflow: \"none !important\" }}\r\n              striped\r\n              bordered\r\n              hover\r\n              data={this.state.data}\r\n            />\r\n          </div>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n","import React, { useState } from \"react\";\r\nimport SortingVisualizer from \"./SortingVisualizer/SortingVisualizer\";\r\nimport \"./App.scss\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport { BrowserRouter as Router, HashRouter, Route } from \"react-router-dom\";\r\nimport Header from \"./layout/Header\";\r\nimport MachineLearning from \"./MachineLearning/MachineLearning\";\r\nimport CovidTracker from \"./CovidTracker/CovidTracker\";\r\nimport CovidSummary from \"./CovidSummary\";\r\n\r\nimport ToggleButton from \"react-toggle-button\";\r\n/*\r\n<ToggleButton\r\n          id=\"dark-mode-toggle2\"\r\n          className=\"sticky_btn\"\r\n          value={themeValue}\r\n          onToggle={() => {\r\n            switch (theme) {\r\n              case \"light\": {\r\n                console.log(\"Changing theme from light to dark\");\r\n                document.body.classList.add(\"darkmode\");\r\n                setTheme(\"dark\");\r\n                setThemeValue(true);\r\n                break;\r\n              }\r\n              case \"dark\": {\r\n                console.log(\"Changing theme from dark to light\");\r\n                document.body.classList.remove(\"darkmode\");\r\n                setTheme(\"light\");\r\n                setThemeValue(false);\r\n                break;\r\n              }\r\n            }\r\n          }}\r\n        />\r\n*/\r\nfunction App() {\r\n  const [theme, setTheme] = useState(\"light\");\r\n  const [themeValue, setThemeValue] = useState(false);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <script type=\"text/javascript\" src=\"./particles.js\"></script>\r\n\r\n      <HashRouter>\r\n        <Header />\r\n\r\n        <Route exact path=\"/\" component={SortingVisualizer} />\r\n        <Route path=\"/sv\" component={SortingVisualizer} />\r\n        <Route path=\"/ml\" component={MachineLearning} />\r\n        <Route path=\"/covid19\" component={CovidTracker} />\r\n        <Route path=\"/covid_summary\" component={CovidSummary} />\r\n      </HashRouter>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.scss\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport \"mdbreact/dist/css/mdb.css\";\r\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}