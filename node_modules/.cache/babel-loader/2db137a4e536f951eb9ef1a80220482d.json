{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Univ of Virginia\\\\Documents\\\\GitHub\\\\react-demo\\\\src\\\\SortingVisualizer\\\\SortingVisualizer.jsx\";\nimport React from 'react';\nimport { getMergeSortAnimations, getquickSortAnimations, getBubbleSortAnimations, getHeapSortAnimations } from '../sortingAlgorithms/sortingAlgorithms.js';\nimport './SortingVisualizer.css'; // Change this value for the speed of the animations.\n// Change this value for the number of bars (value) in the array.\n// This is the main color of the array bars.\n\nconst PRIMARY_COLOR = '#57a18b'; // This is the color of array bars that are being compared throughout the animations.\n\nconst SECONDARY_COLOR = 'orangered';\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      array: [],\n      showmsg: false,\n      arr_size: 100,\n      animation_speed: 1,\n      quickSortDisabled: false,\n      heapSortDisabled: false,\n      mergeSortDisabled: false,\n      bubbleSortDisabled: false,\n      sliderDisabled: false,\n      resetArrayDisabled: false\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray() {\n    const array = [];\n\n    for (let i = 0; i < this.state.arr_size; i++) {\n      array.push(randomIntFromInterval(1, 400));\n    }\n\n    this.setState({\n      array: array\n    });\n\n    if (array.length > 100) {\n      this.setState({\n        animation_speed: 1\n      });\n    } else {\n      this.setState({\n        animation_speed: 100.0 / array.length\n      });\n    }\n  }\n\n  disableAll() {\n    this.setState({\n      quickSortDisabled: true,\n      heapSortDisabled: true,\n      mergeSortDisabled: true,\n      bubbleSortDisabled: true,\n      sliderDisabled: true,\n      resetArrayDisabled: true\n    });\n  }\n\n  enableAll() {\n    this.setState({\n      quickSortDisabled: false,\n      heapSortDisabled: false,\n      mergeSortDisabled: false,\n      bubbleSortDisabled: false,\n      sliderDisabled: false,\n      resetArrayDisabled: false\n    });\n  }\n\n  mergeSort() {\n    console.log(this.state.animation_speed);\n    this.disableAll();\n    const [animations, temp] = getMergeSortAnimations(this.state.array.slice());\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const tooltips = document.getElementsByClassName('tooltiptext');\n      const isColorChange = i % 3 !== 2;\n\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * this.state.animation_speed);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          const tooltip = tooltips[barOneIdx];\n          barOneStyle.height = `${newHeight}px`;\n          tooltip.innerHTML = newHeight;\n          if (i == animations.length - 1) this.enableAll();\n        }, i * this.state.animation_speed);\n      }\n    } //this.enableAll();\n\n  }\n\n  quickSort() {\n    this.disableAll();\n    const [animations, temp] = getquickSortAnimations(this.state.array.slice());\n    console.log(this.state.array);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const tooltips = document.getElementsByClassName('tooltiptext');\n      const isColorChange = i % 4 < 2;\n\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 4 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * this.state.animation_speed);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          const tooltip = tooltips[barOneIdx];\n          barOneStyle.height = `${newHeight}px`;\n          tooltip.innerHTML = newHeight;\n          if (i == animations.length - 1) this.enableAll();\n        }, i * this.state.animation_speed);\n      }\n    }\n    /* document.getElementById(\"slider\").disabled = false;\r\n     document.getElementById(\"resetArray\").disabled = false;\r\n     document.getElementById(\"quickSort\").disabled = false;\r\n     document.getElementById(\"bubbleSort\").disabled = false;\r\n     document.getElementById(\"mergeSort\").disabled = false;\r\n     document.getElementById(\"heapSort\").disabled = false;*/\n\n  }\n\n  afterSort() {}\n\n  heapSort() {\n    this.disableAll();\n    const [animations, temp] = getHeapSortAnimations(this.state.array.slice(), this.state.arr_size);\n    console.log(this.state.array);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const tooltips = document.getElementsByClassName('tooltiptext');\n      const isColorChange = i % 4 < 2;\n\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 4 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * this.state.animation_speed);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          const tooltip = tooltips[barOneIdx];\n          barOneStyle.height = `${newHeight}px`;\n          tooltip.innerHTML = newHeight;\n          if (i == animations.length - 1) this.enableAll();\n        }, i * this.state.animation_speed);\n      }\n    }\n  }\n\n  bubbleSort() {\n    this.disableAll();\n    this.setState({\n      showmsg: true\n    });\n    setTimeout(() => {\n      this.setState({\n        showmsg: false\n      });\n    }, 3000);\n    const [animations, temp] = getBubbleSortAnimations(this.state.array.slice());\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const tooltips = document.getElementsByClassName('tooltiptext');\n      const isColorChange = i % 4 < 2;\n\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 4 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * this.state.animation_speed);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          const tooltip = tooltips[barOneIdx];\n          barOneStyle.height = `${newHeight}px`;\n          tooltip.innerHTML = newHeight;\n          if (i == animations.length - 1) this.enableAll();\n        }, i * this.state.animation_speed);\n      }\n    }\n  } // NOTE: This method will only work if your sorting algorithms actually return\n  // the sorted arrays; if they return the animations (as they currently do), then\n  // this method will be broken.\n\n\n  testSortingAlgorithms() {\n    for (let i = 0; i < 100; i++) {\n      const array = [];\n      const length = randomIntFromInterval(40, 150);\n\n      for (let i = 0; i < length; i++) {\n        array.push(randomIntFromInterval(1, 1000));\n      }\n\n      const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n      const [tempArray3, sortedArray3] = getquickSortAnimations(array.slice());\n      const [tempArray, sortedArray] = getMergeSortAnimations(array.slice());\n      const [tempArray2, sortedArray2] = getHeapSortAnimations(array.slice(), array.length); //console.log(arraysAreEqual(javaScriptSortedArray, sortedArray3));\n      //console.log(arraysAreEqual(javaScriptSortedArray, sortedArray));\n      //console.log(arraysAreEqual(javaScriptSortedArray, sortedArray2));\n      //console.log(array.length)\n      //console.log(sortedArray2.length)\n\n      if (arraysAreEqual(javaScriptSortedArray, sortedArray2) == false) {\n        console.log(array.slice());\n        console.log(sortedArray2);\n      }\n    }\n  }\n\n  handleSizeChange(e) {\n    this.setState({\n      arr_size: e.target.value\n    }, () => {\n      const array = [];\n\n      for (let i = 0; i < this.state.arr_size; i++) {\n        array.push(randomIntFromInterval(1, 400));\n      }\n\n      this.setState({\n        array: array\n      });\n      console.log(this.state.arr_size);\n    });\n  } //<div className=\"tooltiptext\">{this.state.arr_size}</div>\n\n\n  render() {\n    const {\n      array\n    } = this.state;\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"grid-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-range\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 20\n      }\n    }, \"Array Size: \")), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"range\",\n      min: \"5\",\n      max: \"200\",\n      \"data-toggle\": \"tooltip\",\n      \"data-placement\": \"left\",\n      title: this.state.arr_size,\n      className: \"input-range\",\n      disabled: this.state.sliderDisabled,\n      value: this.state.arr_size,\n      onChange: e => {\n        this.handleSizeChange(e);\n      },\n      id: \"slider\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(\"button\", {\n      id: \"resetArray\",\n      className: \"btn btn-dark\",\n      disabled: this.state.resetArrayDisabled,\n      type: \"button\",\n      onClick: () => this.resetArray(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 15\n      }\n    }, \"New Random List\")), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      id: \"mergeSort\",\n      disabled: this.state.mergeSortDisabled,\n      className: \"btn btn-info\",\n      onClick: () => this.mergeSort(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 15\n      }\n    }, \"Merge Sort\")), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      id: \"quickSort\",\n      disabled: this.state.quickSortDisabled,\n      className: \"btn btn-info\",\n      onClick: () => this.quickSort(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 15\n      }\n    }, \"Quick Sort\")), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      id: \"heapSort\",\n      disabled: this.state.heapSortDisabled,\n      className: \"btn btn-info\",\n      onClick: () => this.heapSort(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 15\n      }\n    }, \"Heap Sort\")), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      id: \"bubbleSort\",\n      disabled: this.state.bubbleSortDisabled,\n      className: \"btn btn-info\",\n      onClick: () => this.bubbleSort(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 15\n      }\n    }, \"Bubble Sort\")), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-warning\",\n      style: {\n        display: \"None\"\n      },\n      onClick: () => this.testSortingAlgorithms(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 13\n      }\n    }, \"Test\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"middle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      style: {\n        fontFamily: `Montserrat, sans-serif`,\n        background: `#222`,\n        margin: `0.4em 0`,\n        color: `white`\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 11\n      }\n    }, \"Technologies:\", /*#__PURE__*/React.createElement(\"span\", {\n      class: \"txt-rotate\",\n      \"data-period\": \"1000\",\n      \"data-rotate\": \"[ \\\" HTML5\\\", \\\" CSS3\\\", \\\" React\\\", \\\" Javascript\\\" ]\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 3\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"bars\",\n      style: {\n        position: \"relative\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 13\n      }\n    }, array.map((value, idx) => /*#__PURE__*/React.createElement(\"div\", {\n      className: \"array-bar\",\n      key: idx,\n      style: {\n        backgroundColor: PRIMARY_COLOR,\n        height: `${value}px`,\n        width: `5px`,\n        margin: `0px 1px`\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"tooltiptext\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 19\n      }\n    }, value)))), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"msg\",\n      style: {\n        display: this.state.showmsg ? 'block' : 'None',\n        position: `fixed`,\n        width: `500px`,\n        height: `100px`,\n        top: `50%`,\n        left: `50%`,\n        color: `gray`,\n        fontWeight: 'bold',\n        backgroundColor: 'cyan',\n        textAlign: 'center',\n        marginTop: `-100px`,\n        marginLeft: `-250px`\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 13\n      }\n    }, \"SPOILERS! BubbleSort is a bit slow --> O(N^2)\"))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"footer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 363,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 363,\n        columnNumber: 14\n      }\n    }, \"Visualizing Sorting Algorithms, Developed with React Framework.  Written by Ashkan Bashiri.\"))));\n  }\n\n} // From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\n\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction arraysAreEqual(arrayOne, arrayTwo) {\n  if (arrayOne.length !== arrayTwo.length) return false;\n\n  for (let i = 0; i < arrayOne.length; i++) {\n    if (arrayOne[i] !== arrayTwo[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}","map":{"version":3,"sources":["C:/Users/Univ of Virginia/Documents/GitHub/react-demo/src/SortingVisualizer/SortingVisualizer.jsx"],"names":["React","getMergeSortAnimations","getquickSortAnimations","getBubbleSortAnimations","getHeapSortAnimations","PRIMARY_COLOR","SECONDARY_COLOR","SortingVisualizer","Component","constructor","props","state","array","showmsg","arr_size","animation_speed","quickSortDisabled","heapSortDisabled","mergeSortDisabled","bubbleSortDisabled","sliderDisabled","resetArrayDisabled","componentDidMount","resetArray","i","push","randomIntFromInterval","setState","length","disableAll","enableAll","mergeSort","console","log","animations","temp","slice","arrayBars","document","getElementsByClassName","tooltips","isColorChange","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","tooltip","height","innerHTML","quickSort","afterSort","heapSort","bubbleSort","testSortingAlgorithms","javaScriptSortedArray","sort","a","b","tempArray3","sortedArray3","tempArray","sortedArray","tempArray2","sortedArray2","arraysAreEqual","handleSizeChange","e","target","value","render","display","fontFamily","background","margin","position","map","idx","width","top","left","fontWeight","textAlign","marginTop","marginLeft","min","max","Math","floor","random","arrayOne","arrayTwo"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {\r\n  getMergeSortAnimations,\r\n  getquickSortAnimations,\r\n  getBubbleSortAnimations,\r\n  getHeapSortAnimations\r\n} from '../sortingAlgorithms/sortingAlgorithms.js';\r\nimport './SortingVisualizer.css';\r\n\r\n// Change this value for the speed of the animations.\r\n\r\n// Change this value for the number of bars (value) in the array.\r\n\r\n// This is the main color of the array bars.\r\nconst PRIMARY_COLOR = '#57a18b';\r\n\r\n// This is the color of array bars that are being compared throughout the animations.\r\nconst SECONDARY_COLOR = 'orangered';\r\n\r\nexport default class SortingVisualizer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      array: [],\r\n      showmsg: false,\r\n      arr_size: 100,\r\n      animation_speed: 1,\r\n      quickSortDisabled: false,\r\n      heapSortDisabled: false,\r\n      mergeSortDisabled: false,\r\n      bubbleSortDisabled: false,\r\n      sliderDisabled: false,\r\n      resetArrayDisabled: false,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.resetArray();\r\n  }\r\n\r\n  resetArray() {\r\n    const array = [];\r\n    for (let i = 0; i < this.state.arr_size; i++) {\r\n      array.push(randomIntFromInterval(1, 400));\r\n    }\r\n    this.setState({ array: array });\r\n    if (array.length > 100) {\r\n      this.setState({ animation_speed: 1 });\r\n    }\r\n    else {\r\n      this.setState({ animation_speed: 100.0 / (array.length) });\r\n    }\r\n  }\r\n\r\n  disableAll() {\r\n    this.setState({\r\n      quickSortDisabled: true,\r\n      heapSortDisabled: true,\r\n      mergeSortDisabled: true,\r\n      bubbleSortDisabled: true,\r\n      sliderDisabled: true,\r\n      resetArrayDisabled: true\r\n    });\r\n  }\r\n  enableAll() {\r\n    this.setState({\r\n      quickSortDisabled: false,\r\n      heapSortDisabled: false,\r\n      mergeSortDisabled: false,\r\n      bubbleSortDisabled: false,\r\n      sliderDisabled: false,\r\n      resetArrayDisabled: false\r\n    });\r\n  }\r\n  mergeSort() {\r\n    console.log(this.state.animation_speed);\r\n    this.disableAll();\r\n    const [animations, temp] = getMergeSortAnimations(this.state.array.slice());\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n      const tooltips = document.getElementsByClassName('tooltiptext');\r\n      const isColorChange = i % 3 !== 2;\r\n      if (isColorChange) {\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * this.state.animation_speed);\r\n      } else {\r\n        setTimeout(() => {\r\n          const [barOneIdx, newHeight] = animations[i];\r\n          const barOneStyle = arrayBars[barOneIdx].style;\r\n          const tooltip = tooltips[barOneIdx];\r\n          barOneStyle.height = `${newHeight}px`;\r\n          tooltip.innerHTML = newHeight;\r\n          if (i == animations.length - 1)\r\n            this.enableAll();\r\n        }, i * this.state.animation_speed);\r\n      }\r\n    }\r\n    //this.enableAll();\r\n  }\r\n\r\n  quickSort() {\r\n    this.disableAll();\r\n    const [animations, temp] = getquickSortAnimations(this.state.array.slice());\r\n    console.log(this.state.array)\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n      const tooltips = document.getElementsByClassName('tooltiptext');\r\n      const isColorChange = i % 4 < 2;\r\n      if (isColorChange) {\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = i % 4 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * this.state.animation_speed);\r\n      } else {\r\n        setTimeout(() => {\r\n          const [barOneIdx, newHeight] = animations[i];\r\n          const barOneStyle = arrayBars[barOneIdx].style;\r\n          const tooltip = tooltips[barOneIdx];\r\n          barOneStyle.height = `${newHeight}px`;\r\n          tooltip.innerHTML = newHeight;\r\n          if (i == animations.length - 1)\r\n            this.enableAll();\r\n        }, i * this.state.animation_speed);\r\n      }\r\n    }\r\n    /* document.getElementById(\"slider\").disabled = false;\r\n     document.getElementById(\"resetArray\").disabled = false;\r\n     document.getElementById(\"quickSort\").disabled = false;\r\n     document.getElementById(\"bubbleSort\").disabled = false;\r\n     document.getElementById(\"mergeSort\").disabled = false;\r\n     document.getElementById(\"heapSort\").disabled = false;*/\r\n\r\n  }\r\n\r\n  afterSort() {\r\n\r\n  }\r\n\r\n  heapSort() {\r\n    this.disableAll();\r\n    const [animations, temp] = getHeapSortAnimations(this.state.array.slice(), this.state.arr_size);\r\n    console.log(this.state.array)\r\n\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n      const tooltips = document.getElementsByClassName('tooltiptext');\r\n      const isColorChange = i % 4 < 2;\r\n      if (isColorChange) {\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = i % 4 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * this.state.animation_speed);\r\n      } else {\r\n        setTimeout(() => {\r\n          const [barOneIdx, newHeight] = animations[i];\r\n          const barOneStyle = arrayBars[barOneIdx].style;\r\n          const tooltip = tooltips[barOneIdx];\r\n          barOneStyle.height = `${newHeight}px`;\r\n          tooltip.innerHTML = newHeight;\r\n          if (i == animations.length - 1)\r\n            this.enableAll();\r\n        }, i * this.state.animation_speed);\r\n      }\r\n    }\r\n  }\r\n\r\n  bubbleSort() {\r\n    this.disableAll();\r\n    this.setState({ showmsg: true });\r\n    setTimeout(() => { this.setState({ showmsg: false }); }, 3000);\r\n    const [animations, temp] = getBubbleSortAnimations(this.state.array.slice());\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n      const tooltips = document.getElementsByClassName('tooltiptext');\r\n      const isColorChange = i % 4 < 2;\r\n      if (isColorChange) {\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = i % 4 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * this.state.animation_speed);\r\n      } else {\r\n        setTimeout(() => {\r\n          const [barOneIdx, newHeight] = animations[i];\r\n          const barOneStyle = arrayBars[barOneIdx].style;\r\n          const tooltip = tooltips[barOneIdx];\r\n          barOneStyle.height = `${newHeight}px`;\r\n          tooltip.innerHTML = newHeight;\r\n          if (i == animations.length - 1)\r\n            this.enableAll();\r\n        }, i * this.state.animation_speed);\r\n      }\r\n    }\r\n  }\r\n\r\n  // NOTE: This method will only work if your sorting algorithms actually return\r\n  // the sorted arrays; if they return the animations (as they currently do), then\r\n  // this method will be broken.\r\n  testSortingAlgorithms() {\r\n    for (let i = 0; i < 100; i++) {\r\n      const array = [];\r\n      const length = randomIntFromInterval(40, 150);\r\n      for (let i = 0; i < length; i++) {\r\n        array.push(randomIntFromInterval(1, 1000));\r\n      }\r\n      const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\r\n      const [tempArray3, sortedArray3] = getquickSortAnimations(array.slice());\r\n      const [tempArray, sortedArray] = getMergeSortAnimations(array.slice());\r\n      const [tempArray2, sortedArray2] = getHeapSortAnimations(array.slice(), array.length);\r\n\r\n      //console.log(arraysAreEqual(javaScriptSortedArray, sortedArray3));\r\n      //console.log(arraysAreEqual(javaScriptSortedArray, sortedArray));\r\n      //console.log(arraysAreEqual(javaScriptSortedArray, sortedArray2));\r\n      //console.log(array.length)\r\n      //console.log(sortedArray2.length)\r\n      if (arraysAreEqual(javaScriptSortedArray, sortedArray2) == false) {\r\n        console.log(array.slice());\r\n        console.log(sortedArray2);\r\n      }\r\n    }\r\n  }\r\n\r\n  handleSizeChange(e) {\r\n\r\n    this.setState({ arr_size: e.target.value }, () => {\r\n      const array = [];\r\n      for (let i = 0; i < this.state.arr_size; i++) {\r\n        array.push(randomIntFromInterval(1, 400));\r\n      }\r\n      this.setState({ array: array }); console.log(this.state.arr_size)\r\n    });\r\n\r\n\r\n  }\r\n  //<div className=\"tooltiptext\">{this.state.arr_size}</div>\r\n\r\n  render() {\r\n    const { array } = this.state;\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"grid-container\">\r\n          <div className=\"header\">\r\n            <div>\r\n              <div className=\"input-range\">\r\n                <p><b>Array Size: </b></p>\r\n                <input\r\n                  type=\"range\"\r\n                  min=\"5\"\r\n                  max=\"200\" data-toggle=\"tooltip\" data-placement=\"left\" title={this.state.arr_size}\r\n                  className=\"input-range\"\r\n                  disabled={this.state.sliderDisabled}\r\n                  value={this.state.arr_size}\r\n                  onChange={e => {\r\n                    this.handleSizeChange(e);\r\n                  }}\r\n                  id=\"slider\" />\r\n              </div>\r\n              <button\r\n                id=\"resetArray\"\r\n                className=\"btn btn-dark\"\r\n                disabled={this.state.resetArrayDisabled}\r\n                type=\"button\"\r\n                onClick={() => this.resetArray()}>\r\n                New Random List\r\n            </button>\r\n            </div>\r\n            <div>\r\n              <button id=\"mergeSort\" disabled={this.state.mergeSortDisabled}\r\n                className=\"btn btn-info\" onClick={() => this.mergeSort()}>\r\n                Merge Sort\r\n        </button>\r\n            </div>\r\n            <div>\r\n              <button id=\"quickSort\" disabled={this.state.quickSortDisabled}\r\n                className=\"btn btn-info\" onClick={() => this.quickSort()}>\r\n                Quick Sort\r\n        </button>\r\n            </div>\r\n            <div>\r\n              <button id=\"heapSort\" disabled={this.state.heapSortDisabled}\r\n                className=\"btn btn-info\" onClick={() => this.heapSort()}>\r\n                Heap Sort\r\n        </button>\r\n            </div>\r\n            <div>\r\n              <button id=\"bubbleSort\" disabled={this.state.bubbleSortDisabled}\r\n                className=\"btn btn-info\" onClick={() => this.bubbleSort()}>\r\n                Bubble Sort\r\n        </button></div>\r\n            <button\r\n              className=\"btn btn-warning\"\r\n              style={{ display: \"None\" }}\r\n              onClick={() => this.testSortingAlgorithms()}>\r\n              Test\r\n        </button>\r\n          </div>\r\n          <div className=\"middle\">\r\n          <h1 style={{fontFamily:`Montserrat, sans-serif`,background: `#222`,margin: `0.4em 0`,\r\n  color: `white`}}>Technologies:\r\n  <span\r\n     class=\"txt-rotate\"\r\n     data-period=\"1000\"\r\n     data-rotate='[ \" HTML5\", \" CSS3\", \" React\", \" Javascript\" ]'></span>\r\n</h1>\r\n            <div id=\"bars\" style={{ position: \"relative\" }}>\r\n              {array.map((value, idx) => (\r\n                <div\r\n                  className=\"array-bar\"\r\n                  key={idx}\r\n                  style={{\r\n                    backgroundColor: PRIMARY_COLOR,\r\n                    height: `${value}px`,\r\n                    width: `5px`,\r\n                    margin: `0px 1px`\r\n                  }}>\r\n                  <div className=\"tooltiptext\">{value}</div>\r\n\r\n                </div>\r\n              ))}\r\n            </div>\r\n\r\n            <div\r\n              id=\"msg\"\r\n              style={{\r\n                display: this.state.showmsg ? 'block' : 'None',\r\n                position: `fixed`,\r\n                width: `500px`,\r\n                height: `100px`,\r\n                top: `50%`,\r\n                left: `50%`,\r\n                color: `gray`,\r\n                fontWeight: 'bold',\r\n                backgroundColor: 'cyan',\r\n                textAlign: 'center',\r\n                marginTop: `-100px`,\r\n                marginLeft: `-250px`,\r\n              }}>\r\n              SPOILERS! BubbleSort is a bit slow --> O(N^2)\r\n        </div>\r\n          </div>\r\n\r\n        </div>\r\n        <div className=\"footer\">\r\n          <p><b>Visualizing Sorting Algorithms, Developed with React Framework.  Written by Ashkan Bashiri.</b></p>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\n// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\r\nfunction randomIntFromInterval(min, max) {\r\n  // min and max included\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\nfunction arraysAreEqual(arrayOne, arrayTwo) {\r\n  if (arrayOne.length !== arrayTwo.length) return false;\r\n  for (let i = 0; i < arrayOne.length; i++) {\r\n    if (arrayOne[i] !== arrayTwo[i]) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}