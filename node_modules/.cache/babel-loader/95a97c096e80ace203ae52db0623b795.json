{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Univ of Virginia\\\\Documents\\\\GitHub\\\\react-demo\\\\src\\\\CovidTracker\\\\CovidTracker.jsx\";\nimport React from \"react\";\nimport \"./CovidTracker.scss\";\nimport { Line, Bar } from \"react-chartjs-2\";\nimport Select from \"react-select\"; // Change this value for the speed of the animations.\n// Change this value for the number of bars (value) in the array.\n// This is the main color of the array bars.\n\nexport default class CovidTracker extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleCountryChange = selectedOption => {\n      this.setState({\n        selectedCountry: selectedOption.value\n      }, () => {\n        const select_ = this.state.country_data.filter(element => element.country == this.state.selectedCountry);\n        var bar_data = {\n          labels: select_[0].dates,\n          datasets: [{\n            label: \"#Confirmed\",\n            fill: false,\n            lineTension: 0.5,\n            backgroundColor: \"rgba(33,47,61,1)\",\n            borderColor: \"rgba(33,47,61,1)\",\n            borderWidth: 1,\n            data: select_[0].confirmed.map(function (item, index) {\n              // In this case item correspond to currentValue of array a,\n              // using index to get value from array b\n              return item - select_[0].confirmed[index - 1] || 0;\n            })\n          }, {\n            label: \"#Deaths\",\n            fill: false,\n            lineTension: 0.5,\n            backgroundColor: \"rgba(205,92,92,1)\",\n            borderColor: \"rgba(205,92,92,1)\",\n            borderWidth: 1,\n            data: select_[0].deaths.map(function (item, index) {\n              // In this case item correspond to currentValue of array a,\n              // using index to get value from array b\n              return item - select_[0].deaths[index - 1] || 0;\n            })\n          }, {\n            label: \"#Recovered\",\n            fill: false,\n            lineTension: 0.5,\n            backgroundColor: \"rgba(72,201,176,1)\",\n            borderColor: \"rgba(72,201,176,1)\",\n            borderWidth: 1,\n            data: select_[0].recovered.map(function (item, index) {\n              // In this case item correspond to currentValue of array a,\n              // using index to get value from array b\n              return item - select_[0].recovered[index - 1] || 0;\n            })\n          }]\n        };\n        var labels = select_[0].dates;\n        var datasets = [{\n          label: \"#Confirmed\",\n          fill: false,\n          lineTension: 0.5,\n          backgroundColor: \"rgba(33,47,61,1)\",\n          borderColor: \"rgba(33,47,61,1)\",\n          borderWidth: 1,\n          data: select_[0].confirmed\n        }, {\n          label: \"#Deaths\",\n          fill: false,\n          lineTension: 0.5,\n          backgroundColor: \"rgba(205,92,92,1)\",\n          borderColor: \"rgba(205,92,92,1)\",\n          borderWidth: 1,\n          data: select_[0].deaths\n        }, {\n          label: \"#Recovered\",\n          fill: false,\n          lineTension: 0.5,\n          backgroundColor: \"rgba(72,201,176,1)\",\n          borderColor: \"rgba(72,201,176,1)\",\n          borderWidth: 1,\n          data: select_[0].recovered\n        }];\n        this.setState({\n          labels: labels,\n          datasets: datasets,\n          bar_data: bar_data\n        }, () => {\n          this.setState({\n            labels: labels,\n            datasets: datasets,\n            bar_data: bar_data\n          });\n        });\n      });\n    };\n\n    this.handleCountryChange = this.handleCountryChange.bind(this);\n    this.state = {\n      isLoading: false,\n      summary: [],\n      countries: [],\n      country_data: [],\n      labels: [],\n      datasets: [],\n      selectedCountry: \"\",\n      options: [],\n      bar_data: {}\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      isLoading: true\n    });\n    const options = [];\n    const months = [\"Jan \", \"Feb \", \"Mar \", \"Apr \", \"May \", \"Jun \", \"Jul \", \"Aug \", \"Sep \", \"Oct \", \"Nov \", \"Dec \"];\n    fetch(\"https://api.covid19api.com/all\").then(response => {\n      return response.json();\n    }).then(all => {\n      console.log(all);\n      let countries = [];\n      const country_data = [];\n      all.forEach(element => {\n        if (!countries.includes(element.Country)) {\n          countries.push(element.Country);\n          let date_ = new Date(element.Date);\n          country_data.push({\n            country: element.Country,\n            confirmed: [element.Confirmed],\n            deaths: [element.Deaths],\n            recovered: [element.Recovered],\n            active: [element.Active],\n            dates: [months[date_.getMonth()] + date_.getDate()]\n          });\n          options.push({\n            value: element.Country,\n            label: element.Country\n          });\n        } else {\n          let date_ = new Date(element.Date);\n\n          if (!country_data.filter(data => data.country === element.Country)[0].dates.includes(months[date_.getMonth()] + date_.getDate())) {\n            country_data.filter(data => data.country === element.Country)[0].confirmed.push(element.Confirmed);\n            country_data.filter(data => data.country === element.Country)[0].deaths.push(element.Deaths);\n            country_data.filter(data => data.country === element.Country)[0].recovered.push(element.Recovered);\n            country_data.filter(data => data.country === element.Country)[0].active.push(element.Active);\n            country_data.filter(data => data.country === element.Country)[0].dates.push(months[date_.getMonth()] + date_.getDate());\n          } else {\n            country_data.filter(data => data.country === element.Country)[0].confirmed[country_data.filter(data => data.country === element.Country)[0].dates.indexOf(months[date_.getMonth()] + date_.getDate())] += element.Confirmed;\n            country_data.filter(data => data.country === element.Country)[0].deaths[country_data.filter(data => data.country === element.Country)[0].dates.indexOf(months[date_.getMonth()] + date_.getDate())] += element.Deaths;\n            country_data.filter(data => data.country === element.Country)[0].recovered[country_data.filter(data => data.country === element.Country)[0].dates.indexOf(months[date_.getMonth()] + date_.getDate())] += element.Recovered;\n            country_data.filter(data => data.country === element.Country)[0].active[country_data.filter(data => data.country === element.Country)[0].dates.indexOf(months[date_.getMonth()] + date_.getDate())] += element.Active;\n          }\n        }\n      });\n      this.setState({\n        options\n      });\n      this.setState({\n        countries\n      });\n      this.setState({\n        country_data\n      });\n      this.setState({\n        isLoading: false\n      });\n      console.log(country_data);\n    });\n  }\n\n  rnd_range(mn, mx) {\n    return Math.random() * (mx - mn) + mn;\n  }\n\n  render() {\n    if (this.state.isLoading) {\n      return /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 14\n        }\n      }, \"Fetching Covid-19 data...\");\n    }\n\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"grid-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 13\n      }\n    }, \"Covid19 Tracker App\")), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"label\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 11\n      }\n    }, \"Select a Country (Daily Updates):\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"selector1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Select, {\n      onChange: this.handleCountryChange,\n      options: this.state.options,\n      autoFocus: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"middle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Line, {\n      data: this.state,\n      options: {\n        maintainAspectRatio: true,\n        responsive: true,\n        title: {\n          display: true,\n          text: \"Statistics for \" + this.state.selectedCountry,\n          fontSize: 20\n        },\n        legend: {\n          display: true,\n          position: \"right\"\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Bar, {\n      ref: this.chartReference,\n      data: this.state.bar_data,\n      options: {\n        maintainAspectRatio: true,\n        responsive: true,\n        title: {\n          display: true,\n          text: \"Daily statistics for \" + this.state.selectedCountry,\n          fontSize: 20\n        },\n        legend: {\n          display: true,\n          position: \"right\"\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"footer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 15\n      }\n    }, \"Visualizing Covid19 data, Developed with React Framework. Written by Ashkan Bashiri.\")))));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Univ of Virginia/Documents/GitHub/react-demo/src/CovidTracker/CovidTracker.jsx"],"names":["React","Line","Bar","Select","CovidTracker","Component","constructor","props","handleCountryChange","selectedOption","setState","selectedCountry","value","select_","state","country_data","filter","element","country","bar_data","labels","dates","datasets","label","fill","lineTension","backgroundColor","borderColor","borderWidth","data","confirmed","map","item","index","deaths","recovered","bind","isLoading","summary","countries","options","componentDidMount","months","fetch","then","response","json","all","console","log","forEach","includes","Country","push","date_","Date","Confirmed","Deaths","Recovered","active","Active","getMonth","getDate","indexOf","rnd_range","mn","mx","Math","random","render","maintainAspectRatio","responsive","title","display","text","fontSize","legend","position","chartReference"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport \"./CovidTracker.scss\";\r\nimport { Line, Bar } from \"react-chartjs-2\";\r\nimport Select from \"react-select\";\r\n\r\n// Change this value for the speed of the animations.\r\n\r\n// Change this value for the number of bars (value) in the array.\r\n\r\n// This is the main color of the array bars.\r\n\r\nexport default class CovidTracker extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleCountryChange = this.handleCountryChange.bind(this);\r\n\r\n    this.state = {\r\n      isLoading: false,\r\n      summary: [],\r\n      countries: [],\r\n      country_data: [],\r\n      labels: [],\r\n      datasets: [],\r\n      selectedCountry: \"\",\r\n      options: [],\r\n      bar_data: {},\r\n    };\r\n  }\r\n  handleCountryChange = (selectedOption) => {\r\n    this.setState({ selectedCountry: selectedOption.value }, () => {\r\n      const select_ = this.state.country_data.filter(\r\n        (element) => element.country == this.state.selectedCountry\r\n      );\r\n      var bar_data = {\r\n        labels: select_[0].dates,\r\n        datasets: [\r\n          {\r\n            label: \"#Confirmed\",\r\n            fill: false,\r\n            lineTension: 0.5,\r\n            backgroundColor: \"rgba(33,47,61,1)\",\r\n            borderColor: \"rgba(33,47,61,1)\",\r\n            borderWidth: 1,\r\n            data: select_[0].confirmed.map(function (item, index) {\r\n              // In this case item correspond to currentValue of array a,\r\n              // using index to get value from array b\r\n              return item - select_[0].confirmed[index - 1] || 0;\r\n            }),\r\n          },\r\n          {\r\n            label: \"#Deaths\",\r\n            fill: false,\r\n            lineTension: 0.5,\r\n            backgroundColor: \"rgba(205,92,92,1)\",\r\n            borderColor: \"rgba(205,92,92,1)\",\r\n            borderWidth: 1,\r\n            data: select_[0].deaths.map(function (item, index) {\r\n              // In this case item correspond to currentValue of array a,\r\n              // using index to get value from array b\r\n              return item - select_[0].deaths[index - 1] || 0;\r\n            }),\r\n          },\r\n          {\r\n            label: \"#Recovered\",\r\n            fill: false,\r\n            lineTension: 0.5,\r\n            backgroundColor: \"rgba(72,201,176,1)\",\r\n            borderColor: \"rgba(72,201,176,1)\",\r\n            borderWidth: 1,\r\n            data: select_[0].recovered.map(function (item, index) {\r\n              // In this case item correspond to currentValue of array a,\r\n              // using index to get value from array b\r\n              return item - select_[0].recovered[index - 1] || 0;\r\n            }),\r\n          },\r\n        ],\r\n      };\r\n      var labels = select_[0].dates;\r\n      var datasets = [\r\n        {\r\n          label: \"#Confirmed\",\r\n          fill: false,\r\n          lineTension: 0.5,\r\n          backgroundColor: \"rgba(33,47,61,1)\",\r\n          borderColor: \"rgba(33,47,61,1)\",\r\n          borderWidth: 1,\r\n          data: select_[0].confirmed,\r\n        },\r\n        {\r\n          label: \"#Deaths\",\r\n          fill: false,\r\n          lineTension: 0.5,\r\n          backgroundColor: \"rgba(205,92,92,1)\",\r\n          borderColor: \"rgba(205,92,92,1)\",\r\n          borderWidth: 1,\r\n          data: select_[0].deaths,\r\n        },\r\n        {\r\n          label: \"#Recovered\",\r\n          fill: false,\r\n          lineTension: 0.5,\r\n          backgroundColor: \"rgba(72,201,176,1)\",\r\n          borderColor: \"rgba(72,201,176,1)\",\r\n          borderWidth: 1,\r\n          data: select_[0].recovered,\r\n        },\r\n      ];\r\n      this.setState(\r\n        { labels: labels, datasets: datasets, bar_data: bar_data },\r\n        () => {\r\n          this.setState({\r\n            labels: labels,\r\n            datasets: datasets,\r\n            bar_data: bar_data,\r\n          });\r\n        }\r\n      );\r\n    });\r\n  };\r\n  componentDidMount() {\r\n    this.setState({ isLoading: true });\r\n    const options = [];\r\n    const months = [\r\n      \"Jan \",\r\n      \"Feb \",\r\n      \"Mar \",\r\n      \"Apr \",\r\n      \"May \",\r\n      \"Jun \",\r\n      \"Jul \",\r\n      \"Aug \",\r\n      \"Sep \",\r\n      \"Oct \",\r\n      \"Nov \",\r\n      \"Dec \",\r\n    ];\r\n    fetch(\"https://api.covid19api.com/all\")\r\n      .then((response) => {\r\n        return response.json();\r\n      })\r\n      .then((all) => {\r\n        console.log(all);\r\n        let countries = [];\r\n        const country_data = [];\r\n        all.forEach((element) => {\r\n          if (!countries.includes(element.Country)) {\r\n            countries.push(element.Country);\r\n            let date_ = new Date(element.Date);\r\n            country_data.push({\r\n              country: element.Country,\r\n              confirmed: [element.Confirmed],\r\n              deaths: [element.Deaths],\r\n              recovered: [element.Recovered],\r\n              active: [element.Active],\r\n              dates: [months[date_.getMonth()] + date_.getDate()],\r\n            });\r\n            options.push({ value: element.Country, label: element.Country });\r\n          } else {\r\n            let date_ = new Date(element.Date);\r\n\r\n            if (\r\n              !country_data\r\n                .filter((data) => data.country === element.Country)[0]\r\n                .dates.includes(months[date_.getMonth()] + date_.getDate())\r\n            ) {\r\n              country_data\r\n                .filter((data) => data.country === element.Country)[0]\r\n                .confirmed.push(element.Confirmed);\r\n              country_data\r\n                .filter((data) => data.country === element.Country)[0]\r\n                .deaths.push(element.Deaths);\r\n              country_data\r\n                .filter((data) => data.country === element.Country)[0]\r\n                .recovered.push(element.Recovered);\r\n              country_data\r\n                .filter((data) => data.country === element.Country)[0]\r\n                .active.push(element.Active);\r\n              country_data\r\n                .filter((data) => data.country === element.Country)[0]\r\n                .dates.push(months[date_.getMonth()] + date_.getDate());\r\n            } else {\r\n              country_data.filter(\r\n                (data) => data.country === element.Country\r\n              )[0].confirmed[\r\n                country_data\r\n                  .filter((data) => data.country === element.Country)[0]\r\n                  .dates.indexOf(months[date_.getMonth()] + date_.getDate())\r\n              ] += element.Confirmed;\r\n\r\n              country_data.filter(\r\n                (data) => data.country === element.Country\r\n              )[0].deaths[\r\n                country_data\r\n                  .filter((data) => data.country === element.Country)[0]\r\n                  .dates.indexOf(months[date_.getMonth()] + date_.getDate())\r\n              ] += element.Deaths;\r\n\r\n              country_data.filter(\r\n                (data) => data.country === element.Country\r\n              )[0].recovered[\r\n                country_data\r\n                  .filter((data) => data.country === element.Country)[0]\r\n                  .dates.indexOf(months[date_.getMonth()] + date_.getDate())\r\n              ] += element.Recovered;\r\n\r\n              country_data.filter(\r\n                (data) => data.country === element.Country\r\n              )[0].active[\r\n                country_data\r\n                  .filter((data) => data.country === element.Country)[0]\r\n                  .dates.indexOf(months[date_.getMonth()] + date_.getDate())\r\n              ] += element.Active;\r\n            }\r\n          }\r\n        });\r\n        this.setState({ options });\r\n        this.setState({ countries });\r\n        this.setState({ country_data });\r\n        this.setState({ isLoading: false });\r\n        console.log(country_data);\r\n      });\r\n  }\r\n\r\n  rnd_range(mn, mx) {\r\n    return Math.random() * (mx - mn) + mn;\r\n  }\r\n\r\n  render() {\r\n    if (this.state.isLoading) {\r\n      return <p>Fetching Covid-19 data...</p>;\r\n    }\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"grid-container\">\r\n          <div className=\"header\">\r\n            <h1>Covid19 Tracker App</h1>\r\n          </div>\r\n\r\n          <p className=\"label\">Select a Country (Daily Updates):</p>\r\n          <div className=\"selector1\">\r\n            <Select\r\n              onChange={this.handleCountryChange}\r\n              options={this.state.options}\r\n              autoFocus={true}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"middle\">\r\n            <Line\r\n              data={this.state}\r\n              options={{\r\n                maintainAspectRatio: true,\r\n                responsive: true,\r\n                title: {\r\n                  display: true,\r\n                  text: \"Statistics for \" + this.state.selectedCountry,\r\n                  fontSize: 20,\r\n                },\r\n                legend: {\r\n                  display: true,\r\n                  position: \"right\",\r\n                },\r\n              }}\r\n            />\r\n            <br></br>\r\n            <Bar\r\n              ref={this.chartReference}\r\n              data={this.state.bar_data}\r\n              options={{\r\n                maintainAspectRatio: true,\r\n                responsive: true,\r\n                title: {\r\n                  display: true,\r\n                  text: \"Daily statistics for \" + this.state.selectedCountry,\r\n                  fontSize: 20,\r\n                },\r\n                legend: {\r\n                  display: true,\r\n                  position: \"right\",\r\n                },\r\n              }}\r\n            />\r\n          </div>\r\n          <div className=\"footer\">\r\n            <p>\r\n              <b>\r\n                Visualizing Covid19 data, Developed with React Framework.\r\n                Written by Ashkan Bashiri.\r\n              </b>\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}