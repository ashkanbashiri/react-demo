{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Univ of Virginia\\\\Documents\\\\GitHub\\\\react-demo\\\\src\\\\CovidTracker\\\\CovidTracker.jsx\";\nimport React from \"react\";\nimport \"./CovidTracker.scss\";\nimport { Line } from \"react-chartjs-2\"; // Change this value for the speed of the animations.\n// Change this value for the number of bars (value) in the array.\n// This is the main color of the array bars.\n\nexport default class CovidTracker extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.state = {\n      summary: [],\n      countries: [],\n      country_data: [],\n      labels: [],\n      datasets: [],\n      selectedCountry: \"China\"\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"https://api.covid19api.com/all\").then(response => {\n      return response.json();\n    }).then(all => {\n      let countries = [];\n      const country_data = [];\n      all.forEach(element => {\n        if (!countries.includes(element.Country) && element.Province === \"\") {\n          countries.push(element.Country);\n          country_data.push({\n            country: element.Country,\n            confirmed: [element.Confirmed],\n            deaths: [element.Deaths],\n            recovered: [element.Recovered],\n            active: [element.Active],\n            dates: [element.Date]\n          });\n        } else if (element.Province === \"\") {\n          country_data[country_data.length - 1].confirmed.push(element.Confirmed);\n          country_data[country_data.length - 1].deaths.push(element.Deaths);\n          country_data[country_data.length - 1].recovered.push(element.Recovered);\n          country_data[country_data.length - 1].active.push(element.Active);\n          country_data[country_data.length - 1].dates.push(element.Date);\n        }\n      });\n      this.setState({\n        countries\n      });\n      this.setState({\n        country_data\n      });\n    });\n    this.handleSubmit();\n  }\n\n  rnd_range(mn, mx) {\n    return Math.random() * (mx - mn) + mn;\n  }\n\n  handleSubmit() {\n    let random_country = this.state.countries[Math.floor(this.rnd_range(0, this.state.countries.length)) - 1];\n    this.setState({\n      selectedCountry: random_country\n    }, () => {\n      console.log(this.state.selectedCountry);\n      const select_ = this.state.country_data.filter(element => element.country == this.state.selectedCountry);\n      var labels = select_[0].dates;\n      console.log(labels);\n      var datasets = [{\n        label: \"#Confirmed\",\n        fill: false,\n        lineTension: 0.5,\n        backgroundColor: \"rgba(33,47,61,1)\",\n        borderColor: \"rgba(33,47,61,1)\",\n        borderWidth: 1,\n        data: select_[0].confirmed\n      }, {\n        label: \"#Deaths\",\n        fill: false,\n        lineTension: 0.5,\n        backgroundColor: \"rgba(205,92,92,1)\",\n        borderColor: \"rgba(205,92,92,1)\",\n        borderWidth: 1,\n        data: select_[0].deaths\n      }, {\n        label: \"#Recovered\",\n        fill: false,\n        lineTension: 0.5,\n        backgroundColor: \"rgba(72,201,176,1)\",\n        borderColor: \"rgba(72,201,176,1)\",\n        borderWidth: 1,\n        data: select_[0].recovered\n      }];\n      this.setState({\n        labels: labels,\n        datasets: datasets\n      }, () => {\n        this.setState({\n          labels: labels,\n          datasets: datasets\n        });\n      });\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"grid-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 13\n      }\n    }, \"Covid19 Tracker App\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"middle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: \"country-btn\",\n      onClick: e => this.handleSubmit(e),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 13\n      }\n    }, \"Plot\"), /*#__PURE__*/React.createElement(Line, {\n      data: this.state,\n      options: {\n        title: {\n          display: true,\n          text: \"Daily statistics for \" + this.state.selectedCountry,\n          fontSize: 20\n        },\n        legend: {\n          display: true,\n          position: \"right\"\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 13\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"footer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 13\n      }\n    }, \"Visualizing Covid19 data, Developed with React Framework. Written by Ashkan Bashiri.\"))));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Univ of Virginia/Documents/GitHub/react-demo/src/CovidTracker/CovidTracker.jsx"],"names":["React","Line","CovidTracker","Component","constructor","props","handleSubmit","bind","state","summary","countries","country_data","labels","datasets","selectedCountry","componentDidMount","fetch","then","response","json","all","forEach","element","includes","Country","Province","push","country","confirmed","Confirmed","deaths","Deaths","recovered","Recovered","active","Active","dates","Date","length","setState","rnd_range","mn","mx","Math","random","random_country","floor","console","log","select_","filter","label","fill","lineTension","backgroundColor","borderColor","borderWidth","data","render","e","title","display","text","fontSize","legend","position"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport \"./CovidTracker.scss\";\r\nimport { Line } from \"react-chartjs-2\";\r\n\r\n// Change this value for the speed of the animations.\r\n\r\n// Change this value for the number of bars (value) in the array.\r\n\r\n// This is the main color of the array bars.\r\n\r\nexport default class CovidTracker extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n\r\n    this.state = {\r\n      summary: [],\r\n      countries: [],\r\n      country_data: [],\r\n      labels: [],\r\n      datasets: [],\r\n      selectedCountry: \"China\",\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    fetch(\"https://api.covid19api.com/all\")\r\n      .then((response) => {\r\n        return response.json();\r\n      })\r\n      .then((all) => {\r\n        let countries = [];\r\n        const country_data = [];\r\n        all.forEach((element) => {\r\n          if (!countries.includes(element.Country) && element.Province === \"\") {\r\n            countries.push(element.Country);\r\n            country_data.push({\r\n              country: element.Country,\r\n              confirmed: [element.Confirmed],\r\n              deaths: [element.Deaths],\r\n              recovered: [element.Recovered],\r\n              active: [element.Active],\r\n              dates: [element.Date],\r\n            });\r\n          } else if (element.Province === \"\") {\r\n            country_data[country_data.length - 1].confirmed.push(\r\n              element.Confirmed\r\n            );\r\n            country_data[country_data.length - 1].deaths.push(element.Deaths);\r\n            country_data[country_data.length - 1].recovered.push(\r\n              element.Recovered\r\n            );\r\n            country_data[country_data.length - 1].active.push(element.Active);\r\n            country_data[country_data.length - 1].dates.push(element.Date);\r\n          }\r\n        });\r\n        this.setState({ countries });\r\n        this.setState({ country_data });\r\n      });\r\n    this.handleSubmit();\r\n  }\r\n  rnd_range(mn, mx) {\r\n    return Math.random() * (mx - mn) + mn;\r\n  }\r\n\r\n  handleSubmit() {\r\n    let random_country = this.state.countries[\r\n      Math.floor(this.rnd_range(0, this.state.countries.length)) - 1\r\n    ];\r\n\r\n    this.setState({ selectedCountry: random_country }, () => {\r\n      console.log(this.state.selectedCountry);\r\n\r\n      const select_ = this.state.country_data.filter(\r\n        (element) => element.country == this.state.selectedCountry\r\n      );\r\n      var labels = select_[0].dates;\r\n      console.log(labels);\r\n\r\n      var datasets = [\r\n        {\r\n          label: \"#Confirmed\",\r\n          fill: false,\r\n          lineTension: 0.5,\r\n          backgroundColor: \"rgba(33,47,61,1)\",\r\n          borderColor: \"rgba(33,47,61,1)\",\r\n          borderWidth: 1,\r\n          data: select_[0].confirmed,\r\n        },\r\n        {\r\n          label: \"#Deaths\",\r\n          fill: false,\r\n          lineTension: 0.5,\r\n          backgroundColor: \"rgba(205,92,92,1)\",\r\n          borderColor: \"rgba(205,92,92,1)\",\r\n          borderWidth: 1,\r\n          data: select_[0].deaths,\r\n        },\r\n        {\r\n          label: \"#Recovered\",\r\n          fill: false,\r\n          lineTension: 0.5,\r\n          backgroundColor: \"rgba(72,201,176,1)\",\r\n          borderColor: \"rgba(72,201,176,1)\",\r\n          borderWidth: 1,\r\n          data: select_[0].recovered,\r\n        },\r\n      ];\r\n      this.setState({ labels: labels, datasets: datasets }, () => {\r\n        this.setState({ labels: labels, datasets: datasets });\r\n      });\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"grid-container\">\r\n          <div className=\"header\">\r\n            <h1>Covid19 Tracker App</h1>\r\n          </div>\r\n          <div className=\"middle\">\r\n            <button\r\n              className=\"country-btn\"\r\n              onClick={(e) => this.handleSubmit(e)}\r\n            >\r\n              Plot\r\n            </button>\r\n            <Line\r\n              data={this.state}\r\n              options={{\r\n                title: {\r\n                  display: true,\r\n                  text: \"Daily statistics for \" + this.state.selectedCountry,\r\n                  fontSize: 20,\r\n                },\r\n                legend: {\r\n                  display: true,\r\n                  position: \"right\",\r\n                },\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"footer\">\r\n          <p>\r\n            <b>\r\n              Visualizing Covid19 data, Developed with React Framework. Written\r\n              by Ashkan Bashiri.\r\n            </b>\r\n          </p>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}