{"ast":null,"code":"export function getMergeSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  const auxiliaryArray = array.slice();\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n  return [animations, array];\n}\n\nfunction mergeSortHelper(mainArray, startIdx, endIdx, auxiliaryArray, animations) {\n  if (startIdx === endIdx) return;\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n\nfunction doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations) {\n  let k = startIdx;\n  let i = startIdx;\n  let j = middleIdx + 1;\n\n  while (i <= middleIdx && j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, j]); // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n\n    animations.push([i, j]);\n\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n      // We overwrite the value at index k in the original array with the\n      // value at index i in the auxiliary array.\n      animations.push([k, auxiliaryArray[i]]);\n      mainArray[k++] = auxiliaryArray[i++];\n    } else {\n      // We overwrite the value at index k in the original array with the\n      // value at index j in the auxiliary array.\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }\n\n  while (i <= middleIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, i]); // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n\n    animations.push([i, i]); // We overwrite the value at index k in the original array with the\n    // value at index i in the auxiliary array.\n\n    animations.push([k, auxiliaryArray[i]]);\n    mainArray[k++] = auxiliaryArray[i++];\n  }\n\n  while (j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([j, j]); // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n\n    animations.push([j, j]); // We overwrite the value at index k in the original array with the\n    // value at index j in the auxiliary array.\n\n    animations.push([k, auxiliaryArray[j]]);\n    mainArray[k++] = auxiliaryArray[j++];\n  }\n}\n\nexport function getquickSortAnimations(array) {\n  const animations = [];\n  quickSortHelper(array, 0, array.length - 1, animations);\n  return [animations, array];\n}\n\nfunction partition(arr, low, high, animations) {\n  const pivot = arr[high];\n  let i = low - 1; // index of smaller element\n\n  for (let j = low; j < high; j++) {\n    // If current element is smaller than the pivot\n    animations.push([j, high]);\n    animations.push([j, high]);\n\n    if (arr[j] < pivot) {\n      i++; // swap arr[i] and arr[j]\n\n      animations.push([i, arr[j]]);\n      animations.push([j, arr[i]]);\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n    } else {\n      animations.push([i + 1, arr[i + 1]]);\n      animations.push([j, arr[j]]);\n    }\n  } // swap arr[i+1] and arr[high] (or pivot)\n\n\n  animations.push([i + 1, high]);\n  animations.push([i + 1, high]);\n  animations.push([i + 1, arr[high]]);\n  animations.push([high, arr[i + 1]]);\n  let temp = arr[i + 1];\n  arr[i + 1] = arr[high];\n  arr[high] = temp;\n  return i + 1;\n}\n/* The main function that implements QuickSort() \r\n      arr[] --> Array to be sorted, \r\n      low  --> Starting index, \r\n      high  --> Ending index */\n\n\nfunction quickSortHelper(arr, low, high, animations) {\n  if (low < high) {\n    /* pi is partitioning index, arr[pi] is  \r\n              now at right place */\n    let pi = partition(arr, low, high, animations); // Recursively sort elements before\n    // partition and after partition\n\n    quickSortHelper(arr, low, pi - 1, animations);\n    quickSortHelper(arr, pi + 1, high, animations);\n  }\n}\n\nexport function getBubbleSortAnimations(array) {\n  const animations = [];\n  const n = array.length;\n\n  for (let i = 0; i < n - 1; i++) {\n    for (let j = 0; j < n - i - 1; j++) {\n      animations.push([j, j + 1]);\n      animations.push([j, j + 1]);\n\n      if (array[j] > array[j + 1]) {\n        // swap arr[j+1] and arr[i]\n        animations.push([j, array[j + 1]]);\n        animations.push([j + 1, array[j]]);\n        let temp = array[j];\n        array[j] = array[j + 1];\n        array[j + 1] = temp;\n      } else {\n        animations.push([j, array[j]]);\n        animations.push([j + 1, array[j + 1]]);\n      }\n    }\n  }\n\n  return [animations, array];\n}\nexport function getHeapSortAnimations(array) {\n  const animations = [];\n  let n = array.length; // Build heap (rearrange array) \n\n  for (let i = n / 2 - 1; i >= 0; i--) heapify(array, n, i, animations); // One by one extract an element from heap \n\n\n  for (let i = n - 1; i > 0; i--) {\n    // Move current root to end \n    //animations.push([0, i])\n    animations.push([0, i]);\n    animations.push([i, 0]);\n    animations.push([0, array[i]]);\n    animations.push([i, array[0]]);\n    let temp = array[0];\n    array[0] = array[i];\n    array[i] = temp; // call max heapify on the reduced heap \n\n    heapify(array, i, 0, animations);\n  }\n\n  return [animations, array];\n}\n\nfunction heapify(arr, n, i, animations) {\n  let largest = i; // Initialize largest as root \n\n  let l = 2 * i + 1; // left = 2*i + 1 \n\n  let r = 2 * i + 2; // right = 2*i + 2 \n  // If left child is larger than root \n\n  if (l < n && arr[l] > arr[largest]) largest = l; // If right child is larger than largest so far \n\n  if (r < n && arr[r] > arr[largest]) largest = r; // If largest is not root \n\n  if (!(largest == i)) {\n    animations.push([largest, i]);\n    animations.push([i, largest]);\n    animations.push([largest, arr[i]]);\n    animations.push([i, arr[largest]]);\n    let swap = arr[i];\n    arr[i] = arr[largest];\n    arr[largest] = swap; // Recursively heapify the affected sub-tree \n\n    heapify(arr, n, largest, animations);\n  }\n}","map":{"version":3,"sources":["C:/Users/Univ of Virginia/Documents/GitHub/sorting-visualizer/src/sortingAlgorithms/sortingAlgorithms.js"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","doMerge","k","i","j","push","getquickSortAnimations","quickSortHelper","partition","arr","low","high","pivot","temp","pi","getBubbleSortAnimations","n","getHeapSortAnimations","heapify","largest","l","r","swap"],"mappings":"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","sourcesContent":["export function getMergeSortAnimations(array) {\r\n  const animations = [];\r\n  if (array.length <= 1) return array;\r\n  const auxiliaryArray = array.slice();\r\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n  return [animations, array];\r\n}\r\n\r\nfunction mergeSortHelper(\r\n  mainArray,\r\n  startIdx,\r\n  endIdx,\r\n  auxiliaryArray,\r\n  animations,\r\n) {\r\n  if (startIdx === endIdx) return;\r\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n}\r\n\r\nfunction doMerge(\r\n  mainArray,\r\n  startIdx,\r\n  middleIdx,\r\n  endIdx,\r\n  auxiliaryArray,\r\n  animations,\r\n) {\r\n  let k = startIdx;\r\n  let i = startIdx;\r\n  let j = middleIdx + 1;\r\n  while (i <= middleIdx && j <= endIdx) {\r\n    // These are the values that we're comparing; we push them once\r\n    // to change their color.\r\n    animations.push([i, j]);\r\n    // These are the values that we're comparing; we push them a second\r\n    // time to revert their color.\r\n    animations.push([i, j]);\r\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index i in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[i]]);\r\n      mainArray[k++] = auxiliaryArray[i++];\r\n    } else {\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index j in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[j]]);\r\n      mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n  }\r\n  while (i <= middleIdx) {\r\n    // These are the values that we're comparing; we push them once\r\n    // to change their color.\r\n    animations.push([i, i]);\r\n    // These are the values that we're comparing; we push them a second\r\n    // time to revert their color.\r\n    animations.push([i, i]);\r\n    // We overwrite the value at index k in the original array with the\r\n    // value at index i in the auxiliary array.\r\n    animations.push([k, auxiliaryArray[i]]);\r\n    mainArray[k++] = auxiliaryArray[i++];\r\n  }\r\n  while (j <= endIdx) {\r\n    // These are the values that we're comparing; we push them once\r\n    // to change their color.\r\n    animations.push([j, j]);\r\n    // These are the values that we're comparing; we push them a second\r\n    // time to revert their color.\r\n    animations.push([j, j]);\r\n    // We overwrite the value at index k in the original array with the\r\n    // value at index j in the auxiliary array.\r\n    animations.push([k, auxiliaryArray[j]]);\r\n    mainArray[k++] = auxiliaryArray[j++];\r\n  }\r\n}\r\n\r\nexport function getquickSortAnimations(array) {\r\n  const animations = [];\r\n  quickSortHelper(array, 0, array.length - 1, animations);\r\n  return [animations, array];\r\n}\r\n\r\nfunction partition(arr, low, high, animations) {\r\n  const pivot = arr[high];\r\n  let i = low - 1; // index of smaller element\r\n  for (let j = low; j < high; j++) {\r\n    // If current element is smaller than the pivot\r\n    animations.push([j, high]);\r\n    animations.push([j, high]);\r\n    if (arr[j] < pivot) {\r\n      i++;\r\n      // swap arr[i] and arr[j]\r\n      animations.push([i, arr[j]]);\r\n      animations.push([j, arr[i]]);\r\n      let temp = arr[i];\r\n      arr[i] = arr[j];\r\n      arr[j] = temp;\r\n    } else {\r\n      animations.push([i + 1, arr[i + 1]]);\r\n      animations.push([j, arr[j]]);\r\n    }\r\n  }\r\n\r\n  // swap arr[i+1] and arr[high] (or pivot)\r\n  animations.push([i + 1, high]);\r\n  animations.push([i + 1, high]);\r\n  animations.push([i + 1, arr[high]]);\r\n  animations.push([high, arr[i + 1]]);\r\n  let temp = arr[i + 1];\r\n  arr[i + 1] = arr[high];\r\n  arr[high] = temp;\r\n\r\n  return i + 1;\r\n}\r\n\r\n/* The main function that implements QuickSort() \r\n      arr[] --> Array to be sorted, \r\n      low  --> Starting index, \r\n      high  --> Ending index */\r\nfunction quickSortHelper(arr, low, high, animations) {\r\n  if (low < high) {\r\n    /* pi is partitioning index, arr[pi] is  \r\n              now at right place */\r\n    let pi = partition(arr, low, high, animations);\r\n\r\n    // Recursively sort elements before\r\n    // partition and after partition\r\n    quickSortHelper(arr, low, pi - 1, animations);\r\n    quickSortHelper(arr, pi + 1, high, animations);\r\n  }\r\n}\r\n\r\nexport function getBubbleSortAnimations(array) {\r\n  const animations = [];\r\n  const n = array.length;\r\n  for (let i = 0; i < n - 1; i++) {\r\n    for (let j = 0; j < n - i - 1; j++) {\r\n      animations.push([j, j + 1]);\r\n      animations.push([j, j + 1]);\r\n      if (array[j] > array[j + 1]) {\r\n        // swap arr[j+1] and arr[i]\r\n        animations.push([j, array[j + 1]]);\r\n        animations.push([j + 1, array[j]]);\r\n        let temp = array[j];\r\n        array[j] = array[j + 1];\r\n        array[j + 1] = temp;\r\n      } else {\r\n        animations.push([j, array[j]]);\r\n        animations.push([j + 1, array[j + 1]]);\r\n      }\r\n    }\r\n  }\r\n  return [animations, array];\r\n}\r\n\r\n\r\nexport function getHeapSortAnimations(array) {\r\n  const animations = [];\r\n  let n = array.length;\r\n\r\n  // Build heap (rearrange array) \r\n  for (let i = n / 2 - 1; i >= 0; i--)\r\n    heapify(array, n, i, animations);\r\n\r\n  // One by one extract an element from heap \r\n  for (let i = n - 1; i > 0; i--) {\r\n    // Move current root to end \r\n    //animations.push([0, i])\r\n    animations.push([0, i])\r\n    animations.push([i, 0])\r\n    animations.push([0, array[i]])\r\n    animations.push([i, array[0]])\r\n    let temp = array[0];\r\n    array[0] = array[i];\r\n    array[i] = temp;\r\n\r\n    // call max heapify on the reduced heap \r\n    heapify(array, i, 0, animations);\r\n  }\r\n  return [animations, array]\r\n}\r\n\r\n\r\nfunction heapify(arr, n, i, animations) {\r\n  let largest = i; // Initialize largest as root \r\n  let l = 2 * i + 1; // left = 2*i + 1 \r\n  let r = 2 * i + 2; // right = 2*i + 2 \r\n\r\n  // If left child is larger than root \r\n  if (l < n && arr[l] > arr[largest])\r\n    largest = l;\r\n\r\n  // If right child is larger than largest so far \r\n  if (r < n && arr[r] > arr[largest])\r\n    largest = r;\r\n\r\n  // If largest is not root \r\n  if (!(largest == i)) {\r\n    animations.push([largest, i])\r\n    animations.push([i, largest])\r\n    animations.push([largest, arr[i]])\r\n    animations.push([i, arr[largest]])\r\n    let swap = arr[i];\r\n    arr[i] = arr[largest];\r\n    arr[largest] = swap;\r\n\r\n    // Recursively heapify the affected sub-tree \r\n    heapify(arr, n, largest, animations);\r\n  }\r\n} \r\n"]},"metadata":{},"sourceType":"module"}