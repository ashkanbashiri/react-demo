{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Univ of Virginia\\\\Documents\\\\GitHub\\\\sorting-visualizer\\\\src\\\\SortingVisualizer\\\\SortingVisualizer.jsx\";\nimport React from 'react';\nimport { getMergeSortAnimations, getquickSortAnimations, getBubbleSortAnimations, getHeapSortAnimations } from '../sortingAlgorithms/sortingAlgorithms.js';\nimport './SortingVisualizer.css'; // Change this value for the speed of the animations.\n// Change this value for the number of bars (value) in the array.\n// This is the main color of the array bars.\n\nconst PRIMARY_COLOR = 'PALETURQUOISE'; // This is the color of array bars that are being compared throughout the animations.\n\nconst SECONDARY_COLOR = 'orangered';\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      array: [],\n      showmsg: false,\n      arr_size: 50,\n      animation_speed: 1,\n      quickSortDisabled: false,\n      heapSortDisabled: false,\n      mergeSortDisabled: false,\n      bubbleSortDisabled: false,\n      sliderDisabled: false,\n      resetArrayDisabled: false\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray() {\n    const array = [];\n\n    for (let i = 0; i < this.state.arr_size; i++) {\n      array.push(randomIntFromInterval(1, 400));\n    }\n\n    this.setState({\n      array: array\n    });\n  }\n\n  disableAll() {\n    this.setState({\n      quickSortDisabled: true,\n      heapSortDisabled: true,\n      mergeSortDisabled: true,\n      bubbleSortDisabled: true,\n      sliderDisabled: true,\n      resetArrayDisabled: true\n    });\n  }\n\n  enableAll() {\n    this.setState({\n      quickSortDisabled: false,\n      heapSortDisabled: false,\n      mergeSortDisabled: false,\n      bubbleSortDisabled: false,\n      sliderDisabled: false,\n      resetArrayDisabled: false\n    });\n  }\n\n  mergeSort() {\n    this.disableAll();\n    const [animations, temp] = getMergeSortAnimations(this.state.array);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const tooltips = document.getElementsByClassName('tooltiptext');\n      const isColorChange = i % 3 !== 2;\n\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * this.state.animation_speed);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          const tooltip = tooltips[barOneIdx];\n          barOneStyle.height = `${newHeight}px`;\n          tooltip.innerHTML = newHeight;\n          if (i == animations.length - 1) this.enableAll();\n        }, i * this.state.animation_speed);\n      }\n    } //this.enableAll();\n\n  }\n\n  quickSort() {\n    this.disableAll();\n    const [animations, temp] = getquickSortAnimations(this.state.array);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const tooltips = document.getElementsByClassName('tooltiptext');\n      const isColorChange = i % 4 < 2;\n\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 4 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * this.state.animation_speed);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          const tooltip = tooltips[barOneIdx];\n          barOneStyle.height = `${newHeight}px`;\n          tooltip.innerHTML = newHeight;\n          if (i == animations.length - 1) this.enableAll();\n        }, i * this.state.animation_speed);\n      }\n    }\n    /* document.getElementById(\"slider\").disabled = false;\r\n     document.getElementById(\"resetArray\").disabled = false;\r\n     document.getElementById(\"quickSort\").disabled = false;\r\n     document.getElementById(\"bubbleSort\").disabled = false;\r\n     document.getElementById(\"mergeSort\").disabled = false;\r\n     document.getElementById(\"heapSort\").disabled = false;*/\n\n  }\n\n  afterSort() {}\n\n  heapSort() {\n    this.disableAll();\n    const [animations, temp] = getHeapSortAnimations(this.state.array);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const tooltips = document.getElementsByClassName('tooltiptext');\n      const isColorChange = i % 4 < 2;\n\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 4 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * this.state.animation_speed);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          const tooltip = tooltips[barOneIdx];\n          barOneStyle.height = `${newHeight}px`;\n          tooltip.innerHTML = newHeight;\n          if (i == animations.length - 1) this.enableAll();\n        }, i * this.state.animation_speed);\n      }\n    }\n  }\n\n  bubbleSort() {\n    this.disableAll();\n    this.setState({\n      showmsg: true\n    });\n    setTimeout(() => {\n      this.setState({\n        showmsg: false\n      });\n    }, 3000);\n    const [animations, temp] = getBubbleSortAnimations(this.state.array);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const tooltips = document.getElementsByClassName('tooltiptext');\n      const isColorChange = i % 4 < 2;\n\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 4 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * this.state.animation_speed);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          const tooltip = tooltips[barOneIdx];\n          barOneStyle.height = `${newHeight}px`;\n          tooltip.innerHTML = newHeight;\n          if (i == animations.length - 1) this.enableAll();\n        }, i * this.state.animation_speed);\n      }\n    }\n  } // NOTE: This method will only work if your sorting algorithms actually return\n  // the sorted arrays; if they return the animations (as they currently do), then\n  // this method will be broken.\n\n\n  testSortingAlgorithms() {\n    for (let i = 0; i < 100; i++) {\n      const array = [];\n      const length = 100;\n\n      for (let i = 0; i < length; i++) {\n        array.push(randomIntFromInterval(-1000, 1000));\n      }\n\n      const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n      const [tempArray, sortedArray] = getMergeSortAnimations(array);\n      const [tempArray2, sortedArray2] = getHeapSortAnimations(array);\n      console.log(arraysAreEqual(javaScriptSortedArray, sortedArray));\n      console.log(arraysAreEqual(javaScriptSortedArray, sortedArray2));\n    }\n  }\n\n  handleSizeChange(e) {\n    this.setState({\n      arr_size: e.target.value\n    }, this.resetArray());\n    console.log(this.state.arr_size);\n  } //<div className=\"tooltiptext\">{this.state.arr_size}</div>\n\n\n  render() {\n    const {\n      array\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"grid-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-range\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 18\n      }\n    }, \"Array Size: \")), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"range\",\n      min: \"5\",\n      max: \"200\",\n      \"data-toggle\": \"tooltip\",\n      \"data-placement\": \"left\",\n      title: this.state.arr_size,\n      className: \"input-range\",\n      disabled: this.state.sliderDisabled,\n      value: this.state.arr_size,\n      onChange: e => {\n        this.handleSizeChange(e);\n      },\n      id: \"slider\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(\"button\", {\n      id: \"resetArray\",\n      className: \"btn btn-dark\",\n      disabled: this.state.resetArrayDisabled,\n      type: \"button\",\n      onClick: () => this.resetArray(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 13\n      }\n    }, \"New Random List\")), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      id: \"mergeSort\",\n      disabled: this.state.mergeSortDisabled,\n      className: \"btn btn-info\",\n      onClick: () => this.mergeSort(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 13\n      }\n    }, \"Merge Sort\")), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      id: \"quickSort\",\n      disabled: this.state.quickSortDisabled,\n      className: \"btn btn-info\",\n      onClick: () => this.quickSort(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 13\n      }\n    }, \"Quick Sort\")), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      id: \"heapSort\",\n      disabled: this.state.heapSortDisabled,\n      className: \"btn btn-info\",\n      onClick: () => this.heapSort(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 13\n      }\n    }, \"Heap Sort\")), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      id: \"bubbleSort\",\n      disabled: this.state.bubbleSortDisabled,\n      className: \"btn btn-info\",\n      onClick: () => this.bubbleSort(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 13\n      }\n    }, \"Bubble Sort\")), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-warning\",\n      onClick: () => this.testSortingAlgorithms(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 11\n      }\n    }, \"Test\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"middle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 9\n      }\n    }, array.map((value, idx) => /*#__PURE__*/React.createElement(\"div\", {\n      className: \"array-bar\",\n      key: idx,\n      style: {\n        backgroundColor: PRIMARY_COLOR,\n        height: `${value}px`\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"tooltiptext\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 15\n      }\n    }, value))), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"msg\",\n      style: {\n        display: this.state.showmsg ? 'block' : 'None',\n        position: `fixed`,\n        width: `500px`,\n        height: `100px`,\n        top: `50%`,\n        left: `50%`,\n        color: `gray`,\n        fontWeight: 'bold',\n        backgroundColor: 'cyan',\n        textAlign: 'center',\n        marginTop: `-100px`,\n        marginLeft: `-250px`\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 11\n      }\n    }, \"SPOILERS! BubbleSort is a bit slow --> O(N^2)\")));\n  }\n\n} // From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\n\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction arraysAreEqual(arrayOne, arrayTwo) {\n  if (arrayOne.length !== arrayTwo.length) return false;\n\n  for (let i = 0; i < arrayOne.length; i++) {\n    if (arrayOne[i] !== arrayTwo[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}","map":{"version":3,"sources":["C:/Users/Univ of Virginia/Documents/GitHub/sorting-visualizer/src/SortingVisualizer/SortingVisualizer.jsx"],"names":["React","getMergeSortAnimations","getquickSortAnimations","getBubbleSortAnimations","getHeapSortAnimations","PRIMARY_COLOR","SECONDARY_COLOR","SortingVisualizer","Component","constructor","props","state","array","showmsg","arr_size","animation_speed","quickSortDisabled","heapSortDisabled","mergeSortDisabled","bubbleSortDisabled","sliderDisabled","resetArrayDisabled","componentDidMount","resetArray","i","push","randomIntFromInterval","setState","disableAll","enableAll","mergeSort","animations","temp","length","arrayBars","document","getElementsByClassName","tooltips","isColorChange","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","tooltip","height","innerHTML","quickSort","afterSort","heapSort","bubbleSort","testSortingAlgorithms","javaScriptSortedArray","slice","sort","a","b","tempArray","sortedArray","tempArray2","sortedArray2","console","log","arraysAreEqual","handleSizeChange","e","target","value","render","map","idx","display","position","width","top","left","fontWeight","textAlign","marginTop","marginLeft","min","max","Math","floor","random","arrayOne","arrayTwo"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {\r\n  getMergeSortAnimations,\r\n  getquickSortAnimations,\r\n  getBubbleSortAnimations,\r\n  getHeapSortAnimations\r\n} from '../sortingAlgorithms/sortingAlgorithms.js';\r\nimport './SortingVisualizer.css';\r\n\r\n// Change this value for the speed of the animations.\r\n\r\n// Change this value for the number of bars (value) in the array.\r\n\r\n// This is the main color of the array bars.\r\nconst PRIMARY_COLOR = 'PALETURQUOISE';\r\n\r\n// This is the color of array bars that are being compared throughout the animations.\r\nconst SECONDARY_COLOR = 'orangered';\r\n\r\nexport default class SortingVisualizer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      array: [],\r\n      showmsg: false,\r\n      arr_size: 50,\r\n      animation_speed: 1,\r\n      quickSortDisabled: false,\r\n      heapSortDisabled: false,\r\n      mergeSortDisabled: false,\r\n      bubbleSortDisabled: false,\r\n      sliderDisabled: false,\r\n      resetArrayDisabled: false,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.resetArray();\r\n  }\r\n\r\n  resetArray() {\r\n    const array = [];\r\n    for (let i = 0; i < this.state.arr_size; i++) {\r\n      array.push(randomIntFromInterval(1, 400));\r\n    }\r\n    this.setState({ array: array });\r\n  }\r\n\r\n  disableAll() {\r\n    this.setState({\r\n      quickSortDisabled: true,\r\n      heapSortDisabled: true,\r\n      mergeSortDisabled: true,\r\n      bubbleSortDisabled: true,\r\n      sliderDisabled: true,\r\n      resetArrayDisabled: true\r\n    });\r\n  }\r\n  enableAll() {\r\n    this.setState({\r\n      quickSortDisabled: false,\r\n      heapSortDisabled: false,\r\n      mergeSortDisabled: false,\r\n      bubbleSortDisabled: false,\r\n      sliderDisabled: false,\r\n      resetArrayDisabled: false\r\n    });\r\n  }\r\n  mergeSort() {\r\n    this.disableAll();\r\n    const [animations, temp] = getMergeSortAnimations(this.state.array);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n      const tooltips = document.getElementsByClassName('tooltiptext');\r\n      const isColorChange = i % 3 !== 2;\r\n      if (isColorChange) {\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * this.state.animation_speed);\r\n      } else {\r\n        setTimeout(() => {\r\n          const [barOneIdx, newHeight] = animations[i];\r\n          const barOneStyle = arrayBars[barOneIdx].style;\r\n          const tooltip = tooltips[barOneIdx];\r\n          barOneStyle.height = `${newHeight}px`;\r\n          tooltip.innerHTML = newHeight;\r\n          if (i == animations.length - 1)\r\n            this.enableAll();\r\n        }, i * this.state.animation_speed);\r\n      }\r\n    }\r\n    //this.enableAll();\r\n  }\r\n\r\n  quickSort() {\r\n    this.disableAll();\r\n    const [animations, temp] = getquickSortAnimations(this.state.array);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n      const tooltips = document.getElementsByClassName('tooltiptext');\r\n      const isColorChange = i % 4 < 2;\r\n      if (isColorChange) {\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = i % 4 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * this.state.animation_speed);\r\n      } else {\r\n        setTimeout(() => {\r\n          const [barOneIdx, newHeight] = animations[i];\r\n          const barOneStyle = arrayBars[barOneIdx].style;\r\n          const tooltip = tooltips[barOneIdx];\r\n          barOneStyle.height = `${newHeight}px`;\r\n          tooltip.innerHTML = newHeight;\r\n          if (i == animations.length - 1)\r\n            this.enableAll();\r\n        }, i * this.state.animation_speed);\r\n      }\r\n    }\r\n    /* document.getElementById(\"slider\").disabled = false;\r\n     document.getElementById(\"resetArray\").disabled = false;\r\n     document.getElementById(\"quickSort\").disabled = false;\r\n     document.getElementById(\"bubbleSort\").disabled = false;\r\n     document.getElementById(\"mergeSort\").disabled = false;\r\n     document.getElementById(\"heapSort\").disabled = false;*/\r\n\r\n  }\r\n\r\n  afterSort() {\r\n\r\n  }\r\n\r\n  heapSort() {\r\n    this.disableAll();\r\n    const [animations, temp] = getHeapSortAnimations(this.state.array);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n      const tooltips = document.getElementsByClassName('tooltiptext');\r\n      const isColorChange = i % 4 < 2;\r\n      if (isColorChange) {\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = i % 4 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * this.state.animation_speed);\r\n      } else {\r\n        setTimeout(() => {\r\n          const [barOneIdx, newHeight] = animations[i];\r\n          const barOneStyle = arrayBars[barOneIdx].style;\r\n          const tooltip = tooltips[barOneIdx];\r\n          barOneStyle.height = `${newHeight}px`;\r\n          tooltip.innerHTML = newHeight;\r\n          if (i == animations.length - 1)\r\n            this.enableAll();\r\n        }, i * this.state.animation_speed);\r\n      }\r\n    }\r\n  }\r\n\r\n  bubbleSort() {\r\n    this.disableAll();\r\n    this.setState({ showmsg: true });\r\n    setTimeout(() => { this.setState({ showmsg: false }); }, 3000);\r\n    const [animations, temp] = getBubbleSortAnimations(this.state.array);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n      const tooltips = document.getElementsByClassName('tooltiptext');\r\n      const isColorChange = i % 4 < 2;\r\n      if (isColorChange) {\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = i % 4 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * this.state.animation_speed);\r\n      } else {\r\n        setTimeout(() => {\r\n          const [barOneIdx, newHeight] = animations[i];\r\n          const barOneStyle = arrayBars[barOneIdx].style;\r\n          const tooltip = tooltips[barOneIdx];\r\n          barOneStyle.height = `${newHeight}px`;\r\n          tooltip.innerHTML = newHeight;\r\n          if (i == animations.length - 1)\r\n            this.enableAll();\r\n        }, i * this.state.animation_speed);\r\n      }\r\n    }\r\n  }\r\n\r\n  // NOTE: This method will only work if your sorting algorithms actually return\r\n  // the sorted arrays; if they return the animations (as they currently do), then\r\n  // this method will be broken.\r\n  testSortingAlgorithms() {\r\n    for (let i = 0; i < 100; i++) {\r\n      const array = [];\r\n      const length = 100;\r\n      for (let i = 0; i < length; i++) {\r\n        array.push(randomIntFromInterval(-1000, 1000));\r\n      }\r\n      const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\r\n      const [tempArray, sortedArray] = getMergeSortAnimations(array);\r\n      const [tempArray2, sortedArray2] = getHeapSortAnimations(array);\r\n\r\n      console.log(arraysAreEqual(javaScriptSortedArray, sortedArray));\r\n      console.log(arraysAreEqual(javaScriptSortedArray, sortedArray2));\r\n    }\r\n  }\r\n\r\n  handleSizeChange(e) {\r\n\r\n    this.setState({ arr_size: e.target.value }, this.resetArray());\r\n\r\n    console.log(this.state.arr_size)\r\n\r\n  }\r\n  //<div className=\"tooltiptext\">{this.state.arr_size}</div>\r\n\r\n  render() {\r\n    const { array } = this.state;\r\n\r\n    return (\r\n      <div className=\"grid-container\">\r\n        <div className=\"header\">\r\n          <div>\r\n            <div className=\"input-range\">\r\n              <p><b>Array Size: </b></p>\r\n              <input\r\n                type=\"range\"\r\n                min=\"5\"\r\n                max=\"200\" data-toggle=\"tooltip\" data-placement=\"left\" title={this.state.arr_size}\r\n                className=\"input-range\"\r\n                disabled={this.state.sliderDisabled}\r\n                value={this.state.arr_size}\r\n                onChange={e => {\r\n                  this.handleSizeChange(e);\r\n                }}\r\n                id=\"slider\" />\r\n            </div>\r\n            <button\r\n              id=\"resetArray\"\r\n              className=\"btn btn-dark\"\r\n              disabled={this.state.resetArrayDisabled}\r\n              type=\"button\"\r\n              onClick={() => this.resetArray()}>\r\n              New Random List\r\n            </button>\r\n          </div>\r\n          <div>\r\n            <button id=\"mergeSort\" disabled={this.state.mergeSortDisabled}\r\n              className=\"btn btn-info\" onClick={() => this.mergeSort()}>\r\n              Merge Sort\r\n        </button>\r\n          </div>\r\n          <div>\r\n            <button id=\"quickSort\" disabled={this.state.quickSortDisabled}\r\n              className=\"btn btn-info\" onClick={() => this.quickSort()}>\r\n              Quick Sort\r\n        </button>\r\n          </div>\r\n          <div>\r\n            <button id=\"heapSort\" disabled={this.state.heapSortDisabled}\r\n              className=\"btn btn-info\" onClick={() => this.heapSort()}>\r\n              Heap Sort\r\n        </button>\r\n          </div>\r\n          <div>\r\n            <button id=\"bubbleSort\" disabled={this.state.bubbleSortDisabled}\r\n              className=\"btn btn-info\" onClick={() => this.bubbleSort()}>\r\n              Bubble Sort\r\n        </button></div>\r\n          <button\r\n            className=\"btn btn-warning\"\r\n            onClick={() => this.testSortingAlgorithms()}>\r\n            Test\r\n        </button>\r\n        </div>\r\n        <div className=\"middle\">\r\n          {array.map((value, idx) => (\r\n            <div\r\n              className=\"array-bar\"\r\n              key={idx}\r\n              style={{\r\n                backgroundColor: PRIMARY_COLOR,\r\n                height: `${value}px`,\r\n              }}>\r\n              <div className=\"tooltiptext\">{value}</div>\r\n            </div>\r\n          ))}\r\n          <br />\r\n\r\n          <div\r\n            id=\"msg\"\r\n            style={{\r\n              display: this.state.showmsg ? 'block' : 'None',\r\n              position: `fixed`,\r\n              width: `500px`,\r\n              height: `100px`,\r\n              top: `50%`,\r\n              left: `50%`,\r\n              color: `gray`,\r\n              fontWeight: 'bold',\r\n              backgroundColor: 'cyan',\r\n              textAlign: 'center',\r\n              marginTop: `-100px`,\r\n              marginLeft: `-250px`,\r\n            }}>\r\n            SPOILERS! BubbleSort is a bit slow --> O(N^2)\r\n        </div>\r\n        </div>\r\n\r\n      </div>\r\n\r\n    );\r\n  }\r\n}\r\n\r\n// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\r\nfunction randomIntFromInterval(min, max) {\r\n  // min and max included\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\nfunction arraysAreEqual(arrayOne, arrayTwo) {\r\n  if (arrayOne.length !== arrayTwo.length) return false;\r\n  for (let i = 0; i < arrayOne.length; i++) {\r\n    if (arrayOne[i] !== arrayTwo[i]) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}